{
    "sourceFile": "client/src/components/TodoForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1717912281272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717912377642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n         <Input\n           type=\"text\"\n           value={newTodo}\n           onChange={(e) => setNewTodo(e.target.value)}\n-          ref={(input) => input && input.focus()}\n+          //ref={(input) => input && input.focus()}\n         />\n         <Button\n           mx={2}\n           type=\"submit\"\n"
                },
                {
                    "date": 1717912384204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+// /* eslint-disable @typescript-eslint/no-explicit-any */\n+// import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n+// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n+// import { useState } from \"react\";\n+// import { IoMdAdd } from \"react-icons/io\";\n+// import { BASE_URL } from \"../App\";\n+\n+// const TodoForm = () => {\n+// \tconst [newTodo, setNewTodo] = useState(\"\");\n+\n+// \tconst queryClient = useQueryClient();\n+\n+// \tconst { mutate: createTodo, isPending: isCreating } = useMutation({\n+// \t\tmutationKey: [\"createTodo\"],\n+// \t\tmutationFn: async (e: React.FormEvent) => {\n+// \t\t\te.preventDefault();\n+// \t\t\ttry {\n+// \t\t\t\tconst res = await fetch(BASE_URL + `/todos`, {\n+// \t\t\t\t\tmethod: \"POST\",\n+// \t\t\t\t\theaders: {\n+// \t\t\t\t\t\t\"Content-Type\": \"application/json\",\n+// \t\t\t\t\t},\n+// \t\t\t\t\tbody: JSON.stringify({ body: newTodo }),\n+// \t\t\t\t});\n+// \t\t\t\tconst data = await res.json();\n+\n+// \t\t\t\tif (!res.ok) {\n+// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n+// \t\t\t\t}\n+\n+// \t\t\t\tsetNewTodo(\"\");\n+// \t\t\t\treturn data;\n+// \t\t\t} catch (error: any) {\n+// \t\t\t\tthrow new Error(error);\n+// \t\t\t}\n+// \t\t},\n+// \t\tonSuccess: () => {\n+// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+// \t\t},\n+// \t\tonError: (error: any) => {\n+// \t\t\talert(error.message);\n+// \t\t},\n+// \t});\n+\n+// \treturn (\n+// \t\t<form onSubmit={createTodo}>\n+// \t\t\t<Flex gap={2}>\n+// \t\t\t\t<Input\n+// \t\t\t\t\ttype='text'\n+// \t\t\t\t\tvalue={newTodo}\n+// \t\t\t\t\tonChange={(e) => setNewTodo(e.target.value)}\n+// \t\t\t\t\tref={(input) => input && input.focus()}\n+// \t\t\t\t/>\n+// \t\t\t\t<Button\n+// \t\t\t\t\tmx={2}\n+// \t\t\t\t\ttype='submit'\n+// \t\t\t\t\t_active={{\n+// \t\t\t\t\t\ttransform: \"scale(.97)\",\n+// \t\t\t\t\t}}\n+// \t\t\t\t>\n+// \t\t\t\t\t{isCreating ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n+// \t\t\t\t</Button>\n+// \t\t\t</Flex>\n+// \t\t</form>\n+// \t);\n+// };\n+// export default TodoForm;\n+\n+// STARTER CODE:\n+\n+import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n+import { useState } from \"react\";\n+import { IoMdAdd } from \"react-icons/io\";\n+\n+const TodoForm = () => {\n+  const [newTodo, setNewTodo] = useState(\"\");\n+  const [isPending, setIsPending] = useState(false);\n+\n+  const createTodo = async (e: React.FormEvent) => {\n+    e.preventDefault();\n+    alert(\"Todo added!\");\n+  };\n+  return (\n+    <form onSubmit={createTodo}>\n+      <Flex gap={2}>\n+        <Input\n+          type=\"text\"\n+          value={newTodo}\n+          onChange={(e) => setNewTodo(e.target.value)}\n+          ref={(input) => input && input.focus()}\n+        />\n+        <Button\n+          mx={2}\n+          type=\"submit\"\n+          _active={{\n+            transform: \"scale(.97)\",\n+          }}\n+        >\n+          {isPending ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n+        </Button>\n+      </Flex>\n+    </form>\n+  );\n+};\n+export default TodoForm;\n"
                },
                {
                    "date": 1717949027257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+// /* eslint-disable @typescript-eslint/no-explicit-any */\n+// import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n+// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n+// import { useState } from \"react\";\n+// import { IoMdAdd } from \"react-icons/io\";\n+// import { BASE_URL } from \"../App\";\n+\n+// const TodoForm = () => {\n+// \tconst [newTodo, setNewTodo] = useState(\"\");\n+\n+// \tconst queryClient = useQueryClient();\n+\n+// \tconst { mutate: createTodo, isPending: isCreating } = useMutation({\n+// \t\tmutationKey: [\"createTodo\"],\n+// \t\tmutationFn: async (e: React.FormEvent) => {\n+// \t\t\te.preventDefault();\n+// \t\t\ttry {\n+// \t\t\t\tconst res = await fetch(BASE_URL + `/todos`, {\n+// \t\t\t\t\tmethod: \"POST\",\n+// \t\t\t\t\theaders: {\n+// \t\t\t\t\t\t\"Content-Type\": \"application/json\",\n+// \t\t\t\t\t},\n+// \t\t\t\t\tbody: JSON.stringify({ body: newTodo }),\n+// \t\t\t\t});\n+// \t\t\t\tconst data = await res.json();\n+\n+// \t\t\t\tif (!res.ok) {\n+// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n+// \t\t\t\t}\n+\n+// \t\t\t\tsetNewTodo(\"\");\n+// \t\t\t\treturn data;\n+// \t\t\t} catch (error: any) {\n+// \t\t\t\tthrow new Error(error);\n+// \t\t\t}\n+// \t\t},\n+// \t\tonSuccess: () => {\n+// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+// \t\t},\n+// \t\tonError: (error: any) => {\n+// \t\t\talert(error.message);\n+// \t\t},\n+// \t});\n+\n+// \treturn (\n+// \t\t<form onSubmit={createTodo}>\n+// \t\t\t<Flex gap={2}>\n+// \t\t\t\t<Input\n+// \t\t\t\t\ttype='text'\n+// \t\t\t\t\tvalue={newTodo}\n+// \t\t\t\t\tonChange={(e) => setNewTodo(e.target.value)}\n+// \t\t\t\t\tref={(input) => input && input.focus()}\n+// \t\t\t\t/>\n+// \t\t\t\t<Button\n+// \t\t\t\t\tmx={2}\n+// \t\t\t\t\ttype='submit'\n+// \t\t\t\t\t_active={{\n+// \t\t\t\t\t\ttransform: \"scale(.97)\",\n+// \t\t\t\t\t}}\n+// \t\t\t\t>\n+// \t\t\t\t\t{isCreating ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n+// \t\t\t\t</Button>\n+// \t\t\t</Flex>\n+// \t\t</form>\n+// \t);\n+// };\n+// export default TodoForm;\n+\n+// STARTER CODE:\n+\n+import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n+import { useState } from \"react\";\n+import { IoMdAdd } from \"react-icons/io\";\n+\n+const TodoForm = () => {\n+  const [newTodo, setNewTodo] = useState(\"\");\n+  const [isPending, setIsPending] = useState(false);\n+\n+  const createTodo = async (e: React.FormEvent) => {\n+    e.preventDefault();\n+    alert(\"Todo added!\");\n+  };\n+  return (\n+    <form onSubmit={createTodo}>\n+      <Flex gap={2}>\n+        <Input\n+          type=\"text\"\n+          value={newTodo}\n+          onChange={(e) => setNewTodo(e.target.value)}\n+          ref={(input) => input && input.focus()}\n+        />\n+        <Button\n+          mx={2}\n+          type=\"submit\"\n+          _active={{\n+            transform: \"scale(.97)\",\n+          }}\n+        >\n+          {isPending ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n+        </Button>\n+      </Flex>\n+    </form>\n+  );\n+};\n+export default TodoForm;\n"
                },
                {
                    "date": 1717951270855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n import { IoMdAdd } from \"react-icons/io\";\n \n const TodoForm = () => {\n   const [newTodo, setNewTodo] = useState(\"\");\n-  const [isPending, setIsPending] = useState(false);\n+  const [isPending, setIsPending] = useState(true);\n \n   const createTodo = async (e: React.FormEvent) => {\n     e.preventDefault();\n     alert(\"Todo added!\");\n@@ -102,214 +102,4 @@\n     </form>\n   );\n };\n export default TodoForm;\n-// /* eslint-disable @typescript-eslint/no-explicit-any */\n-// import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n-// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n-// import { useState } from \"react\";\n-// import { IoMdAdd } from \"react-icons/io\";\n-// import { BASE_URL } from \"../App\";\n-\n-// const TodoForm = () => {\n-// \tconst [newTodo, setNewTodo] = useState(\"\");\n-\n-// \tconst queryClient = useQueryClient();\n-\n-// \tconst { mutate: createTodo, isPending: isCreating } = useMutation({\n-// \t\tmutationKey: [\"createTodo\"],\n-// \t\tmutationFn: async (e: React.FormEvent) => {\n-// \t\t\te.preventDefault();\n-// \t\t\ttry {\n-// \t\t\t\tconst res = await fetch(BASE_URL + `/todos`, {\n-// \t\t\t\t\tmethod: \"POST\",\n-// \t\t\t\t\theaders: {\n-// \t\t\t\t\t\t\"Content-Type\": \"application/json\",\n-// \t\t\t\t\t},\n-// \t\t\t\t\tbody: JSON.stringify({ body: newTodo }),\n-// \t\t\t\t});\n-// \t\t\t\tconst data = await res.json();\n-\n-// \t\t\t\tif (!res.ok) {\n-// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n-// \t\t\t\t}\n-\n-// \t\t\t\tsetNewTodo(\"\");\n-// \t\t\t\treturn data;\n-// \t\t\t} catch (error: any) {\n-// \t\t\t\tthrow new Error(error);\n-// \t\t\t}\n-// \t\t},\n-// \t\tonSuccess: () => {\n-// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-// \t\t},\n-// \t\tonError: (error: any) => {\n-// \t\t\talert(error.message);\n-// \t\t},\n-// \t});\n-\n-// \treturn (\n-// \t\t<form onSubmit={createTodo}>\n-// \t\t\t<Flex gap={2}>\n-// \t\t\t\t<Input\n-// \t\t\t\t\ttype='text'\n-// \t\t\t\t\tvalue={newTodo}\n-// \t\t\t\t\tonChange={(e) => setNewTodo(e.target.value)}\n-// \t\t\t\t\tref={(input) => input && input.focus()}\n-// \t\t\t\t/>\n-// \t\t\t\t<Button\n-// \t\t\t\t\tmx={2}\n-// \t\t\t\t\ttype='submit'\n-// \t\t\t\t\t_active={{\n-// \t\t\t\t\t\ttransform: \"scale(.97)\",\n-// \t\t\t\t\t}}\n-// \t\t\t\t>\n-// \t\t\t\t\t{isCreating ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n-// \t\t\t\t</Button>\n-// \t\t\t</Flex>\n-// \t\t</form>\n-// \t);\n-// };\n-// export default TodoForm;\n-\n-// STARTER CODE:\n-\n-import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n-import { useState } from \"react\";\n-import { IoMdAdd } from \"react-icons/io\";\n-\n-const TodoForm = () => {\n-  const [newTodo, setNewTodo] = useState(\"\");\n-  const [isPending, setIsPending] = useState(false);\n-\n-  const createTodo = async (e: React.FormEvent) => {\n-    e.preventDefault();\n-    alert(\"Todo added!\");\n-  };\n-  return (\n-    <form onSubmit={createTodo}>\n-      <Flex gap={2}>\n-        <Input\n-          type=\"text\"\n-          value={newTodo}\n-          onChange={(e) => setNewTodo(e.target.value)}\n-          ref={(input) => input && input.focus()}\n-        />\n-        <Button\n-          mx={2}\n-          type=\"submit\"\n-          _active={{\n-            transform: \"scale(.97)\",\n-          }}\n-        >\n-          {isPending ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n-        </Button>\n-      </Flex>\n-    </form>\n-  );\n-};\n-export default TodoForm;\n-// /* eslint-disable @typescript-eslint/no-explicit-any */\n-// import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n-// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n-// import { useState } from \"react\";\n-// import { IoMdAdd } from \"react-icons/io\";\n-// import { BASE_URL } from \"../App\";\n-\n-// const TodoForm = () => {\n-// \tconst [newTodo, setNewTodo] = useState(\"\");\n-\n-// \tconst queryClient = useQueryClient();\n-\n-// \tconst { mutate: createTodo, isPending: isCreating } = useMutation({\n-// \t\tmutationKey: [\"createTodo\"],\n-// \t\tmutationFn: async (e: React.FormEvent) => {\n-// \t\t\te.preventDefault();\n-// \t\t\ttry {\n-// \t\t\t\tconst res = await fetch(BASE_URL + `/todos`, {\n-// \t\t\t\t\tmethod: \"POST\",\n-// \t\t\t\t\theaders: {\n-// \t\t\t\t\t\t\"Content-Type\": \"application/json\",\n-// \t\t\t\t\t},\n-// \t\t\t\t\tbody: JSON.stringify({ body: newTodo }),\n-// \t\t\t\t});\n-// \t\t\t\tconst data = await res.json();\n-\n-// \t\t\t\tif (!res.ok) {\n-// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n-// \t\t\t\t}\n-\n-// \t\t\t\tsetNewTodo(\"\");\n-// \t\t\t\treturn data;\n-// \t\t\t} catch (error: any) {\n-// \t\t\t\tthrow new Error(error);\n-// \t\t\t}\n-// \t\t},\n-// \t\tonSuccess: () => {\n-// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-// \t\t},\n-// \t\tonError: (error: any) => {\n-// \t\t\talert(error.message);\n-// \t\t},\n-// \t});\n-\n-// \treturn (\n-// \t\t<form onSubmit={createTodo}>\n-// \t\t\t<Flex gap={2}>\n-// \t\t\t\t<Input\n-// \t\t\t\t\ttype='text'\n-// \t\t\t\t\tvalue={newTodo}\n-// \t\t\t\t\tonChange={(e) => setNewTodo(e.target.value)}\n-// \t\t\t\t\tref={(input) => input && input.focus()}\n-// \t\t\t\t/>\n-// \t\t\t\t<Button\n-// \t\t\t\t\tmx={2}\n-// \t\t\t\t\ttype='submit'\n-// \t\t\t\t\t_active={{\n-// \t\t\t\t\t\ttransform: \"scale(.97)\",\n-// \t\t\t\t\t}}\n-// \t\t\t\t>\n-// \t\t\t\t\t{isCreating ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n-// \t\t\t\t</Button>\n-// \t\t\t</Flex>\n-// \t\t</form>\n-// \t);\n-// };\n-// export default TodoForm;\n-\n-// STARTER CODE:\n-\n-import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n-import { useState } from \"react\";\n-import { IoMdAdd } from \"react-icons/io\";\n-\n-const TodoForm = () => {\n-  const [newTodo, setNewTodo] = useState(\"\");\n-  const [isPending, setIsPending] = useState(false);\n-\n-  const createTodo = async (e: React.FormEvent) => {\n-    e.preventDefault();\n-    alert(\"Todo added!\");\n-  };\n-  return (\n-    <form onSubmit={createTodo}>\n-      <Flex gap={2}>\n-        <Input\n-          type=\"text\"\n-          value={newTodo}\n-          onChange={(e) => setNewTodo(e.target.value)}\n-          //ref={(input) => input && input.focus()}\n-        />\n-        <Button\n-          mx={2}\n-          type=\"submit\"\n-          _active={{\n-            transform: \"scale(.97)\",\n-          }}\n-        >\n-          {isPending ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n-        </Button>\n-      </Flex>\n-    </form>\n-  );\n-};\n-export default TodoForm;\n"
                },
                {
                    "date": 1717963016812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+// /* eslint-disable @typescript-eslint/no-explicit-any */\n+// import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n+// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n+// import { useState } from \"react\";\n+// import { IoMdAdd } from \"react-icons/io\";\n+// import { BASE_URL } from \"../App\";\n+\n+// const TodoForm = () => {\n+// \tconst [newTodo, setNewTodo] = useState(\"\");\n+\n+// \tconst queryClient = useQueryClient();\n+\n+// \tconst { mutate: createTodo, isPending: isCreating } = useMutation({\n+// \t\tmutationKey: [\"createTodo\"],\n+// \t\tmutationFn: async (e: React.FormEvent) => {\n+// \t\t\te.preventDefault();\n+// \t\t\ttry {\n+// \t\t\t\tconst res = await fetch(BASE_URL + `/todos`, {\n+// \t\t\t\t\tmethod: \"POST\",\n+// \t\t\t\t\theaders: {\n+// \t\t\t\t\t\t\"Content-Type\": \"application/json\",\n+// \t\t\t\t\t},\n+// \t\t\t\t\tbody: JSON.stringify({ body: newTodo }),\n+// \t\t\t\t});\n+// \t\t\t\tconst data = await res.json();\n+\n+// \t\t\t\tif (!res.ok) {\n+// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n+// \t\t\t\t}\n+\n+// \t\t\t\tsetNewTodo(\"\");\n+// \t\t\t\treturn data;\n+// \t\t\t} catch (error: any) {\n+// \t\t\t\tthrow new Error(error);\n+// \t\t\t}\n+// \t\t},\n+// \t\tonSuccess: () => {\n+// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+// \t\t},\n+// \t\tonError: (error: any) => {\n+// \t\t\talert(error.message);\n+// \t\t},\n+// \t});\n+\n+// \treturn (\n+// \t\t<form onSubmit={createTodo}>\n+// \t\t\t<Flex gap={2}>\n+// \t\t\t\t<Input\n+// \t\t\t\t\ttype='text'\n+// \t\t\t\t\tvalue={newTodo}\n+// \t\t\t\t\tonChange={(e) => setNewTodo(e.target.value)}\n+// \t\t\t\t\tref={(input) => input && input.focus()}\n+// \t\t\t\t/>\n+// \t\t\t\t<Button\n+// \t\t\t\t\tmx={2}\n+// \t\t\t\t\ttype='submit'\n+// \t\t\t\t\t_active={{\n+// \t\t\t\t\t\ttransform: \"scale(.97)\",\n+// \t\t\t\t\t}}\n+// \t\t\t\t>\n+// \t\t\t\t\t{isCreating ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n+// \t\t\t\t</Button>\n+// \t\t\t</Flex>\n+// \t\t</form>\n+// \t);\n+// };\n+// export default TodoForm;\n+\n+// STARTER CODE:\n+\n+import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n+import { useState } from \"react\";\n+import { IoMdAdd } from \"react-icons/io\";\n+\n+const TodoForm = () => {\n+  const [newTodo, setNewTodo] = useState(\"\");\n+  const [isPending, setIsPending] = useState(false);\n+\n+  const createTodo = async (e: React.FormEvent) => {\n+    e.preventDefault();\n+    alert(\"Todo added!\");\n+  };\n+  return (\n+    <form onSubmit={createTodo}>\n+      <Flex gap={2}>\n+        <Input\n+          type=\"text\"\n+          value={newTodo}\n+          onChange={(e) => setNewTodo(e.target.value)}\n+          ref={(input) => input && input.focus()}\n+        />\n+        <Button\n+          mx={2}\n+          type=\"submit\"\n+          _active={{\n+            transform: \"scale(.97)\",\n+          }}\n+        >\n+          {isPending ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n+        </Button>\n+      </Flex>\n+    </form>\n+  );\n+};\n+export default TodoForm;\n"
                },
                {
                    "date": 1717967308790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+/* eslint-disable @typescript-eslint/no-explicit-any */\n+import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n+import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n+import { useState } from \"react\";\n+import { IoMdAdd } from \"react-icons/io\";\n+import { BASE_URL } from \"../App\";\n+\n+const TodoForm = () => {\n+  const [newTodo, setNewTodo] = useState(\"\");\n+\n+  const queryClient = useQueryClient();\n+\n+  const { mutate: createTodo, isPending: isCreating } = useMutation({\n+    mutationKey: [\"createTodo\"],\n+    mutationFn: async (e: React.FormEvent) => {\n+      e.preventDefault();\n+      try {\n+        const res = await fetch(BASE_URL + `/todos`, {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          body: JSON.stringify({ body: newTodo }),\n+        });\n+        const data = await res.json();\n+\n+        if (!res.ok) {\n+          throw new Error(data.error || \"Something went wrong\");\n+        }\n+\n+        setNewTodo(\"\");\n+        return data;\n+      } catch (error: any) {\n+        throw new Error(error);\n+      }\n+    },\n+    onSuccess: () => {\n+      queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+    },\n+    onError: (error: any) => {\n+      alert(error.message);\n+    },\n+  });\n+\n+  return (\n+    <form onSubmit={createTodo}>\n+      <Flex gap={2}>\n+        <Input\n+          type=\"text\"\n+          value={newTodo}\n+          onChange={(e) => setNewTodo(e.target.value)}\n+          ref={(input) => input && input.focus()}\n+        />\n+        <Button\n+          mx={2}\n+          type=\"submit\"\n+          _active={{\n+            transform: \"scale(.97)\",\n+          }}\n+        >\n+          {isCreating ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n+        </Button>\n+      </Flex>\n+    </form>\n+  );\n+};\n+export default TodoForm;\n+\n+// STARTER CODE:\n+\n+// import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n+// import { useState } from \"react\";\n+// import { IoMdAdd } from \"react-icons/io\";\n+\n+// const TodoForm = () => {\n+//   const [newTodo, setNewTodo] = useState(\"\");\n+//   const [isPending, setIsPending] = useState(false);\n+\n+//   const createTodo = async (e: React.FormEvent) => {\n+//     e.preventDefault();\n+//     alert(\"Todo added!\");\n+//   };\n+//   return (\n+//     <form onSubmit={createTodo}>\n+//       <Flex gap={2}>\n+//         <Input\n+//           type=\"text\"\n+//           value={newTodo}\n+//           onChange={(e) => setNewTodo(e.target.value)}\n+//           ref={(input) => input && input.focus()}\n+//         />\n+//         <Button\n+//           mx={2}\n+//           type=\"submit\"\n+//           _active={{\n+//             transform: \"scale(.97)\",\n+//           }}\n+//         >\n+//           {isPending ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n+//         </Button>\n+//       </Flex>\n+//     </form>\n+//   );\n+// };\n+// export default TodoForm;\n"
                }
            ],
            "date": 1717912281272,
            "name": "Commit-0",
            "content": "// /* eslint-disable @typescript-eslint/no-explicit-any */\n// import { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\n// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n// import { useState } from \"react\";\n// import { IoMdAdd } from \"react-icons/io\";\n// import { BASE_URL } from \"../App\";\n\n// const TodoForm = () => {\n// \tconst [newTodo, setNewTodo] = useState(\"\");\n\n// \tconst queryClient = useQueryClient();\n\n// \tconst { mutate: createTodo, isPending: isCreating } = useMutation({\n// \t\tmutationKey: [\"createTodo\"],\n// \t\tmutationFn: async (e: React.FormEvent) => {\n// \t\t\te.preventDefault();\n// \t\t\ttry {\n// \t\t\t\tconst res = await fetch(BASE_URL + `/todos`, {\n// \t\t\t\t\tmethod: \"POST\",\n// \t\t\t\t\theaders: {\n// \t\t\t\t\t\t\"Content-Type\": \"application/json\",\n// \t\t\t\t\t},\n// \t\t\t\t\tbody: JSON.stringify({ body: newTodo }),\n// \t\t\t\t});\n// \t\t\t\tconst data = await res.json();\n\n// \t\t\t\tif (!res.ok) {\n// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n// \t\t\t\t}\n\n// \t\t\t\tsetNewTodo(\"\");\n// \t\t\t\treturn data;\n// \t\t\t} catch (error: any) {\n// \t\t\t\tthrow new Error(error);\n// \t\t\t}\n// \t\t},\n// \t\tonSuccess: () => {\n// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n// \t\t},\n// \t\tonError: (error: any) => {\n// \t\t\talert(error.message);\n// \t\t},\n// \t});\n\n// \treturn (\n// \t\t<form onSubmit={createTodo}>\n// \t\t\t<Flex gap={2}>\n// \t\t\t\t<Input\n// \t\t\t\t\ttype='text'\n// \t\t\t\t\tvalue={newTodo}\n// \t\t\t\t\tonChange={(e) => setNewTodo(e.target.value)}\n// \t\t\t\t\tref={(input) => input && input.focus()}\n// \t\t\t\t/>\n// \t\t\t\t<Button\n// \t\t\t\t\tmx={2}\n// \t\t\t\t\ttype='submit'\n// \t\t\t\t\t_active={{\n// \t\t\t\t\t\ttransform: \"scale(.97)\",\n// \t\t\t\t\t}}\n// \t\t\t\t>\n// \t\t\t\t\t{isCreating ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n// \t\t\t\t</Button>\n// \t\t\t</Flex>\n// \t\t</form>\n// \t);\n// };\n// export default TodoForm;\n\n// STARTER CODE:\n\nimport { Button, Flex, Input, Spinner } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport { IoMdAdd } from \"react-icons/io\";\n\nconst TodoForm = () => {\n  const [newTodo, setNewTodo] = useState(\"\");\n  const [isPending, setIsPending] = useState(false);\n\n  const createTodo = async (e: React.FormEvent) => {\n    e.preventDefault();\n    alert(\"Todo added!\");\n  };\n  return (\n    <form onSubmit={createTodo}>\n      <Flex gap={2}>\n        <Input\n          type=\"text\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          ref={(input) => input && input.focus()}\n        />\n        <Button\n          mx={2}\n          type=\"submit\"\n          _active={{\n            transform: \"scale(.97)\",\n          }}\n        >\n          {isPending ? <Spinner size={\"xs\"} /> : <IoMdAdd size={30} />}\n        </Button>\n      </Flex>\n    </form>\n  );\n};\nexport default TodoForm;\n"
        }
    ]
}