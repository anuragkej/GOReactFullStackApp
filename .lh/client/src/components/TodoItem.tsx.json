{
    "sourceFile": "client/src/components/TodoItem.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1717912494186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717963877336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n+// import { FaCheckCircle } from \"react-icons/fa\";\n+// import { MdDelete } from \"react-icons/md\";\n+// import { Todo } from \"./TodoList\";\n+// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n+// import { BASE_URL } from \"../App\";\n+\n+// const TodoItem = ({ todo }: { todo: Todo }) => {\n+// \tconst queryClient = useQueryClient();\n+\n+// \tconst { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+// \t\tmutationKey: [\"updateTodo\"],\n+// \t\tmutationFn: async () => {\n+// \t\t\tif (todo.completed) return alert(\"Todo is already completed\");\n+// \t\t\ttry {\n+// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+// \t\t\t\t\tmethod: \"PATCH\",\n+// \t\t\t\t});\n+// \t\t\t\tconst data = await res.json();\n+// \t\t\t\tif (!res.ok) {\n+// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n+// \t\t\t\t}\n+// \t\t\t\treturn data;\n+// \t\t\t} catch (error) {\n+// \t\t\t\tconsole.log(error);\n+// \t\t\t}\n+// \t\t},\n+// \t\tonSuccess: () => {\n+// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+// \t\t},\n+// \t});\n+\n+// \tconst { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n+// \t\tmutationKey: [\"deleteTodo\"],\n+// \t\tmutationFn: async () => {\n+// \t\t\ttry {\n+// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+// \t\t\t\t\tmethod: \"DELETE\",\n+// \t\t\t\t});\n+// \t\t\t\tconst data = await res.json();\n+// \t\t\t\tif (!res.ok) {\n+// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n+// \t\t\t\t}\n+// \t\t\t\treturn data;\n+// \t\t\t} catch (error) {\n+// \t\t\t\tconsole.log(error);\n+// \t\t\t}\n+// \t\t},\n+// \t\tonSuccess: () => {\n+// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+// \t\t},\n+// \t});\n+\n+// \treturn (\n+// \t\t<Flex gap={2} alignItems={\"center\"}>\n+// \t\t\t<Flex\n+// \t\t\t\tflex={1}\n+// \t\t\t\talignItems={\"center\"}\n+// \t\t\t\tborder={\"1px\"}\n+// \t\t\t\tborderColor={\"gray.600\"}\n+// \t\t\t\tp={2}\n+// \t\t\t\tborderRadius={\"lg\"}\n+// \t\t\t\tjustifyContent={\"space-between\"}\n+// \t\t\t>\n+// \t\t\t\t<Text\n+// \t\t\t\t\tcolor={todo.completed ? \"green.200\" : \"yellow.100\"}\n+// \t\t\t\t\ttextDecoration={todo.completed ? \"line-through\" : \"none\"}\n+// \t\t\t\t>\n+// \t\t\t\t\t{todo.body}\n+// \t\t\t\t</Text>\n+// \t\t\t\t{todo.completed && (\n+// \t\t\t\t\t<Badge ml='1' colorScheme='green'>\n+// \t\t\t\t\t\tDone\n+// \t\t\t\t\t</Badge>\n+// \t\t\t\t)}\n+// \t\t\t\t{!todo.completed && (\n+// \t\t\t\t\t<Badge ml='1' colorScheme='yellow'>\n+// \t\t\t\t\t\tIn Progress\n+// \t\t\t\t\t</Badge>\n+// \t\t\t\t)}\n+// \t\t\t</Flex>\n+// \t\t\t<Flex gap={2} alignItems={\"center\"}>\n+// \t\t\t\t<Box color={\"green.500\"} cursor={\"pointer\"} onClick={() => updateTodo()}>\n+// \t\t\t\t\t{!isUpdating && <FaCheckCircle size={20} />}\n+// \t\t\t\t\t{isUpdating && <Spinner size={\"sm\"} />}\n+// \t\t\t\t</Box>\n+// \t\t\t\t<Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n+// \t\t\t\t\t{!isDeleting && <MdDelete size={25} />}\n+// \t\t\t\t\t{isDeleting && <Spinner size={\"sm\"} />}\n+// \t\t\t\t</Box>\n+// \t\t\t</Flex>\n+// \t\t</Flex>\n+// \t);\n+// };\n+// export default TodoItem;\n+\n+// STARTER CODE:\n+\n+import { Badge, Box, Flex, Text } from \"@chakra-ui/react\";\n+import { FaCheckCircle } from \"react-icons/fa\";\n+import { MdDelete } from \"react-icons/md\";\n+import { Todo } from \"./TodoList\";\n+import { useMutation } from \"@tanstack/react-query\";\n+\n+const TodoItem = ({ todo }: { todo: Todo }) => {\n+  const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+    mutationKey: [\"updateTodo\"],\n+    mutationFn: async () => {\n+      if (todo.completed) return alert(\"Todo is already completed, good job!\");\n+    },\n+  });\n+  return (\n+    <Flex gap={2} alignItems={\"center\"}>\n+      <Flex\n+        flex={1}\n+        alignItems={\"center\"}\n+        border={\"1px\"}\n+        borderColor={\"gray.600\"}\n+        p={2}\n+        borderRadius={\"lg\"}\n+        justifyContent={\"space-between\"}\n+      >\n+        <Text\n+          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n+          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n+        >\n+          {todo.body}\n+        </Text>\n+        {todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"green\">\n+            Done\n+          </Badge>\n+        )}\n+        {!todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"yellow\">\n+            In Progress\n+          </Badge>\n+        )}\n+      </Flex>\n+      <Flex gap={2} alignItems={\"center\"}>\n+        <Box color={\"green.500\"} cursor={\"pointer\"} onclick={updateTodo}>\n+          <FaCheckCircle size={20} />\n+        </Box>\n+        <Box color={\"red.500\"} cursor={\"pointer\"}>\n+          <MdDelete size={25} />\n+        </Box>\n+      </Flex>\n+    </Flex>\n+  );\n+};\n+export default TodoItem;\n"
                },
                {
                    "date": 1717964075066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,14 +100,18 @@\n import { FaCheckCircle } from \"react-icons/fa\";\n import { MdDelete } from \"react-icons/md\";\n import { Todo } from \"./TodoList\";\n import { useMutation } from \"@tanstack/react-query\";\n+import { BASE_URL } from \"../App\";\n \n const TodoItem = ({ todo }: { todo: Todo }) => {\n   const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n     mutationKey: [\"updateTodo\"],\n     mutationFn: async () => {\n       if (todo.completed) return alert(\"Todo is already completed, good job!\");\n+      try{\n+        const res = await fetch(BASE_URL + `/todos/${todo._id}`,{method:\"PATCH\",})\n+      }\n     },\n   });\n   return (\n     <Flex gap={2} alignItems={\"center\"}>\n@@ -148,147 +152,4 @@\n     </Flex>\n   );\n };\n export default TodoItem;\n-// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n-// import { FaCheckCircle } from \"react-icons/fa\";\n-// import { MdDelete } from \"react-icons/md\";\n-// import { Todo } from \"./TodoList\";\n-// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n-// import { BASE_URL } from \"../App\";\n-\n-// const TodoItem = ({ todo }: { todo: Todo }) => {\n-// \tconst queryClient = useQueryClient();\n-\n-// \tconst { mutate: updateTodo, isPending: isUpdating } = useMutation({\n-// \t\tmutationKey: [\"updateTodo\"],\n-// \t\tmutationFn: async () => {\n-// \t\t\tif (todo.completed) return alert(\"Todo is already completed\");\n-// \t\t\ttry {\n-// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-// \t\t\t\t\tmethod: \"PATCH\",\n-// \t\t\t\t});\n-// \t\t\t\tconst data = await res.json();\n-// \t\t\t\tif (!res.ok) {\n-// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n-// \t\t\t\t}\n-// \t\t\t\treturn data;\n-// \t\t\t} catch (error) {\n-// \t\t\t\tconsole.log(error);\n-// \t\t\t}\n-// \t\t},\n-// \t\tonSuccess: () => {\n-// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-// \t\t},\n-// \t});\n-\n-// \tconst { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n-// \t\tmutationKey: [\"deleteTodo\"],\n-// \t\tmutationFn: async () => {\n-// \t\t\ttry {\n-// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-// \t\t\t\t\tmethod: \"DELETE\",\n-// \t\t\t\t});\n-// \t\t\t\tconst data = await res.json();\n-// \t\t\t\tif (!res.ok) {\n-// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n-// \t\t\t\t}\n-// \t\t\t\treturn data;\n-// \t\t\t} catch (error) {\n-// \t\t\t\tconsole.log(error);\n-// \t\t\t}\n-// \t\t},\n-// \t\tonSuccess: () => {\n-// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-// \t\t},\n-// \t});\n-\n-// \treturn (\n-// \t\t<Flex gap={2} alignItems={\"center\"}>\n-// \t\t\t<Flex\n-// \t\t\t\tflex={1}\n-// \t\t\t\talignItems={\"center\"}\n-// \t\t\t\tborder={\"1px\"}\n-// \t\t\t\tborderColor={\"gray.600\"}\n-// \t\t\t\tp={2}\n-// \t\t\t\tborderRadius={\"lg\"}\n-// \t\t\t\tjustifyContent={\"space-between\"}\n-// \t\t\t>\n-// \t\t\t\t<Text\n-// \t\t\t\t\tcolor={todo.completed ? \"green.200\" : \"yellow.100\"}\n-// \t\t\t\t\ttextDecoration={todo.completed ? \"line-through\" : \"none\"}\n-// \t\t\t\t>\n-// \t\t\t\t\t{todo.body}\n-// \t\t\t\t</Text>\n-// \t\t\t\t{todo.completed && (\n-// \t\t\t\t\t<Badge ml='1' colorScheme='green'>\n-// \t\t\t\t\t\tDone\n-// \t\t\t\t\t</Badge>\n-// \t\t\t\t)}\n-// \t\t\t\t{!todo.completed && (\n-// \t\t\t\t\t<Badge ml='1' colorScheme='yellow'>\n-// \t\t\t\t\t\tIn Progress\n-// \t\t\t\t\t</Badge>\n-// \t\t\t\t)}\n-// \t\t\t</Flex>\n-// \t\t\t<Flex gap={2} alignItems={\"center\"}>\n-// \t\t\t\t<Box color={\"green.500\"} cursor={\"pointer\"} onClick={() => updateTodo()}>\n-// \t\t\t\t\t{!isUpdating && <FaCheckCircle size={20} />}\n-// \t\t\t\t\t{isUpdating && <Spinner size={\"sm\"} />}\n-// \t\t\t\t</Box>\n-// \t\t\t\t<Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n-// \t\t\t\t\t{!isDeleting && <MdDelete size={25} />}\n-// \t\t\t\t\t{isDeleting && <Spinner size={\"sm\"} />}\n-// \t\t\t\t</Box>\n-// \t\t\t</Flex>\n-// \t\t</Flex>\n-// \t);\n-// };\n-// export default TodoItem;\n-\n-// STARTER CODE:\n-\n-import { Badge, Box, Flex, Text } from \"@chakra-ui/react\";\n-import { FaCheckCircle } from \"react-icons/fa\";\n-import { MdDelete } from \"react-icons/md\";\n-\n-const TodoItem = ({ todo }: { todo: any }) => {\n-  return (\n-    <Flex gap={2} alignItems={\"center\"}>\n-      <Flex\n-        flex={1}\n-        alignItems={\"center\"}\n-        border={\"1px\"}\n-        borderColor={\"gray.600\"}\n-        p={2}\n-        borderRadius={\"lg\"}\n-        justifyContent={\"space-between\"}\n-      >\n-        <Text\n-          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n-          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n-        >\n-          {todo.body}\n-        </Text>\n-        {todo.completed && (\n-          <Badge ml=\"1\" colorScheme=\"green\">\n-            Done\n-          </Badge>\n-        )}\n-        {!todo.completed && (\n-          <Badge ml=\"1\" colorScheme=\"yellow\">\n-            In Progress\n-          </Badge>\n-        )}\n-      </Flex>\n-      <Flex gap={2} alignItems={\"center\"}>\n-        <Box color={\"green.500\"} cursor={\"pointer\"}>\n-          <FaCheckCircle size={20} />\n-        </Box>\n-        <Box color={\"red.500\"} cursor={\"pointer\"}>\n-          <MdDelete size={25} />\n-        </Box>\n-      </Flex>\n-    </Flex>\n-  );\n-};\n-export default TodoItem;\n"
                },
                {
                    "date": 1717964191593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,11 +107,18 @@\n   const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n     mutationKey: [\"updateTodo\"],\n     mutationFn: async () => {\n       if (todo.completed) return alert(\"Todo is already completed, good job!\");\n-      try{\n-        const res = await fetch(BASE_URL + `/todos/${todo._id}`,{method:\"PATCH\",})\n-      }\n+      try {\n+        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+          method: \"PATCH\",\n+        });\n+        const data = await res.json();\n+        if (!res.ok) {\n+          throw new Error(data.error || \"Something went wrong\");\n+        }\n+        return data;\n+      } catch (error) {}\n     },\n   });\n   return (\n     <Flex gap={2} alignItems={\"center\"}>\n"
                },
                {
                    "date": 1717964208186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,11 @@\n         if (!res.ok) {\n           throw new Error(data.error || \"Something went wrong\");\n         }\n         return data;\n-      } catch (error) {}\n+      } catch (error) {\n+        console.log(error);\n+      }\n     },\n   });\n   return (\n     <Flex gap={2} alignItems={\"center\"}>\n"
                },
                {
                    "date": 1717964313854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,165 @@\n+// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n+// import { FaCheckCircle } from \"react-icons/fa\";\n+// import { MdDelete } from \"react-icons/md\";\n+// import { Todo } from \"./TodoList\";\n+// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n+// import { BASE_URL } from \"../App\";\n+\n+// const TodoItem = ({ todo }: { todo: Todo }) => {\n+// \tconst queryClient = useQueryClient();\n+\n+// \tconst { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+// \t\tmutationKey: [\"updateTodo\"],\n+// \t\tmutationFn: async () => {\n+// \t\t\tif (todo.completed) return alert(\"Todo is already completed\");\n+// \t\t\ttry {\n+// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+// \t\t\t\t\tmethod: \"PATCH\",\n+// \t\t\t\t});\n+// \t\t\t\tconst data = await res.json();\n+// \t\t\t\tif (!res.ok) {\n+// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n+// \t\t\t\t}\n+// \t\t\t\treturn data;\n+// \t\t\t} catch (error) {\n+// \t\t\t\tconsole.log(error);\n+// \t\t\t}\n+// \t\t},\n+// \t\tonSuccess: () => {\n+// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+// \t\t},\n+// \t});\n+\n+// \tconst { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n+// \t\tmutationKey: [\"deleteTodo\"],\n+// \t\tmutationFn: async () => {\n+// \t\t\ttry {\n+// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+// \t\t\t\t\tmethod: \"DELETE\",\n+// \t\t\t\t});\n+// \t\t\t\tconst data = await res.json();\n+// \t\t\t\tif (!res.ok) {\n+// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n+// \t\t\t\t}\n+// \t\t\t\treturn data;\n+// \t\t\t} catch (error) {\n+// \t\t\t\tconsole.log(error);\n+// \t\t\t}\n+// \t\t},\n+// \t\tonSuccess: () => {\n+// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+// \t\t},\n+// \t});\n+\n+// \treturn (\n+// \t\t<Flex gap={2} alignItems={\"center\"}>\n+// \t\t\t<Flex\n+// \t\t\t\tflex={1}\n+// \t\t\t\talignItems={\"center\"}\n+// \t\t\t\tborder={\"1px\"}\n+// \t\t\t\tborderColor={\"gray.600\"}\n+// \t\t\t\tp={2}\n+// \t\t\t\tborderRadius={\"lg\"}\n+// \t\t\t\tjustifyContent={\"space-between\"}\n+// \t\t\t>\n+// \t\t\t\t<Text\n+// \t\t\t\t\tcolor={todo.completed ? \"green.200\" : \"yellow.100\"}\n+// \t\t\t\t\ttextDecoration={todo.completed ? \"line-through\" : \"none\"}\n+// \t\t\t\t>\n+// \t\t\t\t\t{todo.body}\n+// \t\t\t\t</Text>\n+// \t\t\t\t{todo.completed && (\n+// \t\t\t\t\t<Badge ml='1' colorScheme='green'>\n+// \t\t\t\t\t\tDone\n+// \t\t\t\t\t</Badge>\n+// \t\t\t\t)}\n+// \t\t\t\t{!todo.completed && (\n+// \t\t\t\t\t<Badge ml='1' colorScheme='yellow'>\n+// \t\t\t\t\t\tIn Progress\n+// \t\t\t\t\t</Badge>\n+// \t\t\t\t)}\n+// \t\t\t</Flex>\n+// \t\t\t<Flex gap={2} alignItems={\"center\"}>\n+// \t\t\t\t<Box color={\"green.500\"} cursor={\"pointer\"} onClick={() => updateTodo()}>\n+// \t\t\t\t\t{!isUpdating && <FaCheckCircle size={20} />}\n+// \t\t\t\t\t{isUpdating && <Spinner size={\"sm\"} />}\n+// \t\t\t\t</Box>\n+// \t\t\t\t<Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n+// \t\t\t\t\t{!isDeleting && <MdDelete size={25} />}\n+// \t\t\t\t\t{isDeleting && <Spinner size={\"sm\"} />}\n+// \t\t\t\t</Box>\n+// \t\t\t</Flex>\n+// \t\t</Flex>\n+// \t);\n+// };\n+// export default TodoItem;\n+\n+// STARTER CODE:\n+\n+import { Badge, Box, Flex, Text } from \"@chakra-ui/react\";\n+import { FaCheckCircle } from \"react-icons/fa\";\n+import { MdDelete } from \"react-icons/md\";\n+import { Todo } from \"./TodoList\";\n+import { useMutation } from \"@tanstack/react-query\";\n+import { BASE_URL } from \"../App\";\n+\n+const TodoItem = ({ todo }: { todo: Todo }) => {\n+  const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+    mutationKey: [\"updateTodo\"],\n+    mutationFn: async () => {\n+      if (todo.completed) return alert(\"Todo is already completed, good job!\");\n+      try {\n+        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+          method: \"PATCH\",\n+        });\n+        const data = await res.json();\n+        if (!res.ok) {\n+          throw new Error(data.error || \"Something went wrong\");\n+        }\n+        return data;\n+      } catch (error) {\n+        console.log(error);\n+      }\n+    },\n+  });\n+  return (\n+    <Flex gap={2} alignItems={\"center\"}>\n+      <Flex\n+        flex={1}\n+        alignItems={\"center\"}\n+        border={\"1px\"}\n+        borderColor={\"gray.600\"}\n+        p={2}\n+        borderRadius={\"lg\"}\n+        justifyContent={\"space-between\"}\n+      >\n+        <Text\n+          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n+          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n+        >\n+          {todo.body}\n+        </Text>\n+        {todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"green\">\n+            Done\n+          </Badge>\n+        )}\n+        {!todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"yellow\">\n+            In Progress\n+          </Badge>\n+        )}\n+      </Flex>\n+      <Flex gap={2} alignItems={\"center\"}>\n+        <Box color={\"green.500\"} cursor={\"pointer\"} onclick={updateTodo}>\n+          {!isUpdating && <FaCheckCircle size={20} />}\n+          {!isUpdating && <Spinner size={\"sm\"} />}\n+        </Box>\n+        <Box color={\"red.500\"} cursor={\"pointer\"}>\n+          <MdDelete size={25} />\n+        </Box>\n+      </Flex>\n+    </Flex>\n+  );\n+};\n+export default TodoItem;\n"
                },
                {
                    "date": 1717964336490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n // export default TodoItem;\n \n // STARTER CODE:\n \n-import { Badge, Box, Flex, Text } from \"@chakra-ui/react\";\n+import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n import { FaCheckCircle } from \"react-icons/fa\";\n import { MdDelete } from \"react-icons/md\";\n import { Todo } from \"./TodoList\";\n import { useMutation } from \"@tanstack/react-query\";\n@@ -162,168 +162,4 @@\n     </Flex>\n   );\n };\n export default TodoItem;\n-// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n-// import { FaCheckCircle } from \"react-icons/fa\";\n-// import { MdDelete } from \"react-icons/md\";\n-// import { Todo } from \"./TodoList\";\n-// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n-// import { BASE_URL } from \"../App\";\n-\n-// const TodoItem = ({ todo }: { todo: Todo }) => {\n-// \tconst queryClient = useQueryClient();\n-\n-// \tconst { mutate: updateTodo, isPending: isUpdating } = useMutation({\n-// \t\tmutationKey: [\"updateTodo\"],\n-// \t\tmutationFn: async () => {\n-// \t\t\tif (todo.completed) return alert(\"Todo is already completed\");\n-// \t\t\ttry {\n-// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-// \t\t\t\t\tmethod: \"PATCH\",\n-// \t\t\t\t});\n-// \t\t\t\tconst data = await res.json();\n-// \t\t\t\tif (!res.ok) {\n-// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n-// \t\t\t\t}\n-// \t\t\t\treturn data;\n-// \t\t\t} catch (error) {\n-// \t\t\t\tconsole.log(error);\n-// \t\t\t}\n-// \t\t},\n-// \t\tonSuccess: () => {\n-// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-// \t\t},\n-// \t});\n-\n-// \tconst { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n-// \t\tmutationKey: [\"deleteTodo\"],\n-// \t\tmutationFn: async () => {\n-// \t\t\ttry {\n-// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-// \t\t\t\t\tmethod: \"DELETE\",\n-// \t\t\t\t});\n-// \t\t\t\tconst data = await res.json();\n-// \t\t\t\tif (!res.ok) {\n-// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n-// \t\t\t\t}\n-// \t\t\t\treturn data;\n-// \t\t\t} catch (error) {\n-// \t\t\t\tconsole.log(error);\n-// \t\t\t}\n-// \t\t},\n-// \t\tonSuccess: () => {\n-// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-// \t\t},\n-// \t});\n-\n-// \treturn (\n-// \t\t<Flex gap={2} alignItems={\"center\"}>\n-// \t\t\t<Flex\n-// \t\t\t\tflex={1}\n-// \t\t\t\talignItems={\"center\"}\n-// \t\t\t\tborder={\"1px\"}\n-// \t\t\t\tborderColor={\"gray.600\"}\n-// \t\t\t\tp={2}\n-// \t\t\t\tborderRadius={\"lg\"}\n-// \t\t\t\tjustifyContent={\"space-between\"}\n-// \t\t\t>\n-// \t\t\t\t<Text\n-// \t\t\t\t\tcolor={todo.completed ? \"green.200\" : \"yellow.100\"}\n-// \t\t\t\t\ttextDecoration={todo.completed ? \"line-through\" : \"none\"}\n-// \t\t\t\t>\n-// \t\t\t\t\t{todo.body}\n-// \t\t\t\t</Text>\n-// \t\t\t\t{todo.completed && (\n-// \t\t\t\t\t<Badge ml='1' colorScheme='green'>\n-// \t\t\t\t\t\tDone\n-// \t\t\t\t\t</Badge>\n-// \t\t\t\t)}\n-// \t\t\t\t{!todo.completed && (\n-// \t\t\t\t\t<Badge ml='1' colorScheme='yellow'>\n-// \t\t\t\t\t\tIn Progress\n-// \t\t\t\t\t</Badge>\n-// \t\t\t\t)}\n-// \t\t\t</Flex>\n-// \t\t\t<Flex gap={2} alignItems={\"center\"}>\n-// \t\t\t\t<Box color={\"green.500\"} cursor={\"pointer\"} onClick={() => updateTodo()}>\n-// \t\t\t\t\t{!isUpdating && <FaCheckCircle size={20} />}\n-// \t\t\t\t\t{isUpdating && <Spinner size={\"sm\"} />}\n-// \t\t\t\t</Box>\n-// \t\t\t\t<Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n-// \t\t\t\t\t{!isDeleting && <MdDelete size={25} />}\n-// \t\t\t\t\t{isDeleting && <Spinner size={\"sm\"} />}\n-// \t\t\t\t</Box>\n-// \t\t\t</Flex>\n-// \t\t</Flex>\n-// \t);\n-// };\n-// export default TodoItem;\n-\n-// STARTER CODE:\n-\n-import { Badge, Box, Flex, Text } from \"@chakra-ui/react\";\n-import { FaCheckCircle } from \"react-icons/fa\";\n-import { MdDelete } from \"react-icons/md\";\n-import { Todo } from \"./TodoList\";\n-import { useMutation } from \"@tanstack/react-query\";\n-import { BASE_URL } from \"../App\";\n-\n-const TodoItem = ({ todo }: { todo: Todo }) => {\n-  const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n-    mutationKey: [\"updateTodo\"],\n-    mutationFn: async () => {\n-      if (todo.completed) return alert(\"Todo is already completed, good job!\");\n-      try {\n-        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-          method: \"PATCH\",\n-        });\n-        const data = await res.json();\n-        if (!res.ok) {\n-          throw new Error(data.error || \"Something went wrong\");\n-        }\n-        return data;\n-      } catch (error) {\n-        console.log(error);\n-      }\n-    },\n-  });\n-  return (\n-    <Flex gap={2} alignItems={\"center\"}>\n-      <Flex\n-        flex={1}\n-        alignItems={\"center\"}\n-        border={\"1px\"}\n-        borderColor={\"gray.600\"}\n-        p={2}\n-        borderRadius={\"lg\"}\n-        justifyContent={\"space-between\"}\n-      >\n-        <Text\n-          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n-          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n-        >\n-          {todo.body}\n-        </Text>\n-        {todo.completed && (\n-          <Badge ml=\"1\" colorScheme=\"green\">\n-            Done\n-          </Badge>\n-        )}\n-        {!todo.completed && (\n-          <Badge ml=\"1\" colorScheme=\"yellow\">\n-            In Progress\n-          </Badge>\n-        )}\n-      </Flex>\n-      <Flex gap={2} alignItems={\"center\"}>\n-        <Box color={\"green.500\"} cursor={\"pointer\"} onclick={updateTodo}>\n-          <FaCheckCircle size={20} />\n-        </Box>\n-        <Box color={\"red.500\"} cursor={\"pointer\"}>\n-          <MdDelete size={25} />\n-        </Box>\n-      </Flex>\n-    </Flex>\n-  );\n-};\n-export default TodoItem;\n"
                },
                {
                    "date": 1717964352183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n           </Badge>\n         )}\n       </Flex>\n       <Flex gap={2} alignItems={\"center\"}>\n-        <Box color={\"green.500\"} cursor={\"pointer\"} onclick={updateTodo}>\n+        <Box color={\"green.500\"} cursor={\"pointer\"} onclick={() => updateTodo}>\n           {!isUpdating && <FaCheckCircle size={20} />}\n           {!isUpdating && <Spinner size={\"sm\"} />}\n         </Box>\n         <Box color={\"red.500\"} cursor={\"pointer\"}>\n"
                },
                {
                    "date": 1717964388500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,13 @@\n           </Badge>\n         )}\n       </Flex>\n       <Flex gap={2} alignItems={\"center\"}>\n-        <Box color={\"green.500\"} cursor={\"pointer\"} onclick={() => updateTodo}>\n+        <Box\n+          color={\"green.500\"}\n+          cursor={\"pointer\"}\n+          onClick={() => updateTodo()}\n+        >\n           {!isUpdating && <FaCheckCircle size={20} />}\n           {!isUpdating && <Spinner size={\"sm\"} />}\n         </Box>\n         <Box color={\"red.500\"} cursor={\"pointer\"}>\n"
                },
                {
                    "date": 1717964819870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n+// import { FaCheckCircle } from \"react-icons/fa\";\n+// import { MdDelete } from \"react-icons/md\";\n+// import { Todo } from \"./TodoList\";\n+// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n+// import { BASE_URL } from \"../App\";\n+\n+// const TodoItem = ({ todo }: { todo: Todo }) => {\n+// \tconst queryClient = useQueryClient();\n+\n+// \tconst { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+// \t\tmutationKey: [\"updateTodo\"],\n+// \t\tmutationFn: async () => {\n+// \t\t\tif (todo.completed) return alert(\"Todo is already completed\");\n+// \t\t\ttry {\n+// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+// \t\t\t\t\tmethod: \"PATCH\",\n+// \t\t\t\t});\n+// \t\t\t\tconst data = await res.json();\n+// \t\t\t\tif (!res.ok) {\n+// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n+// \t\t\t\t}\n+// \t\t\t\treturn data;\n+// \t\t\t} catch (error) {\n+// \t\t\t\tconsole.log(error);\n+// \t\t\t}\n+// \t\t},\n+// \t\tonSuccess: () => {\n+// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+// \t\t},\n+// \t});\n+\n+// \tconst { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n+// \t\tmutationKey: [\"deleteTodo\"],\n+// \t\tmutationFn: async () => {\n+// \t\t\ttry {\n+// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+// \t\t\t\t\tmethod: \"DELETE\",\n+// \t\t\t\t});\n+// \t\t\t\tconst data = await res.json();\n+// \t\t\t\tif (!res.ok) {\n+// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n+// \t\t\t\t}\n+// \t\t\t\treturn data;\n+// \t\t\t} catch (error) {\n+// \t\t\t\tconsole.log(error);\n+// \t\t\t}\n+// \t\t},\n+// \t\tonSuccess: () => {\n+// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+// \t\t},\n+// \t});\n+\n+// \treturn (\n+// \t\t<Flex gap={2} alignItems={\"center\"}>\n+// \t\t\t<Flex\n+// \t\t\t\tflex={1}\n+// \t\t\t\talignItems={\"center\"}\n+// \t\t\t\tborder={\"1px\"}\n+// \t\t\t\tborderColor={\"gray.600\"}\n+// \t\t\t\tp={2}\n+// \t\t\t\tborderRadius={\"lg\"}\n+// \t\t\t\tjustifyContent={\"space-between\"}\n+// \t\t\t>\n+// \t\t\t\t<Text\n+// \t\t\t\t\tcolor={todo.completed ? \"green.200\" : \"yellow.100\"}\n+// \t\t\t\t\ttextDecoration={todo.completed ? \"line-through\" : \"none\"}\n+// \t\t\t\t>\n+// \t\t\t\t\t{todo.body}\n+// \t\t\t\t</Text>\n+// \t\t\t\t{todo.completed && (\n+// \t\t\t\t\t<Badge ml='1' colorScheme='green'>\n+// \t\t\t\t\t\tDone\n+// \t\t\t\t\t</Badge>\n+// \t\t\t\t)}\n+// \t\t\t\t{!todo.completed && (\n+// \t\t\t\t\t<Badge ml='1' colorScheme='yellow'>\n+// \t\t\t\t\t\tIn Progress\n+// \t\t\t\t\t</Badge>\n+// \t\t\t\t)}\n+// \t\t\t</Flex>\n+// \t\t\t<Flex gap={2} alignItems={\"center\"}>\n+// \t\t\t\t<Box color={\"green.500\"} cursor={\"pointer\"} onClick={() => updateTodo()}>\n+// \t\t\t\t\t{!isUpdating && <FaCheckCircle size={20} />}\n+// \t\t\t\t\t{isUpdating && <Spinner size={\"sm\"} />}\n+// \t\t\t\t</Box>\n+// \t\t\t\t<Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n+// \t\t\t\t\t{!isDeleting && <MdDelete size={25} />}\n+// \t\t\t\t\t{isDeleting && <Spinner size={\"sm\"} />}\n+// \t\t\t\t</Box>\n+// \t\t\t</Flex>\n+// \t\t</Flex>\n+// \t);\n+// };\n+// export default TodoItem;\n+\n+// STARTER CODE:\n+\n+import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n+import { FaCheckCircle } from \"react-icons/fa\";\n+import { MdDelete } from \"react-icons/md\";\n+import { Todo } from \"./TodoList\";\n+import { useMutation } from \"@tanstack/react-query\";\n+import { BASE_URL } from \"../App\";\n+\n+const TodoItem = ({ todo }: { todo: Todo }) => {\n+  const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+    mutationKey: [\"updateTodo\"],\n+    mutationFn: async () => {\n+      if (todo.completed) return alert(\"Todo is already completed, good job!\");\n+      try {\n+        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+          method: \"PATCH\",\n+        });\n+        const data = await res.json();\n+        if (!res.ok) {\n+          throw new Error(data.error || \"Something went wrong\");\n+        }\n+        return data;\n+      } catch (error) {\n+        console.log(error);\n+      }\n+    },\n+  });\n+  return (\n+    <Flex gap={2} alignItems={\"center\"}>\n+      <Flex\n+        flex={1}\n+        alignItems={\"center\"}\n+        border={\"1px\"}\n+        borderColor={\"gray.600\"}\n+        p={2}\n+        borderRadius={\"lg\"}\n+        justifyContent={\"space-between\"}\n+      >\n+        <Text\n+          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n+          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n+        >\n+          {todo.body}\n+        </Text>\n+        {todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"green\">\n+            Done\n+          </Badge>\n+        )}\n+        {!todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"yellow\">\n+            In Progress\n+          </Badge>\n+        )}\n+      </Flex>\n+      <Flex gap={2} alignItems={\"center\"}>\n+        <Box\n+          color={\"green.500\"}\n+          cursor={\"pointer\"}\n+          onClick={() => updateTodo()}\n+        >\n+          {!isUpdating && <FaCheckCircle size={20} />}\n+          {!isUpdating && <Spinner size={\"sm\"} />}\n+        </Box>\n+        <Box color={\"red.500\"} cursor={\"pointer\"}>\n+          <MdDelete size={25} />\n+        </Box>\n+      </Flex>\n+    </Flex>\n+  );\n+};\n+export default TodoItem;\n"
                },
                {
                    "date": 1717964861023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n+import { FaCheckCircle } from \"react-icons/fa\";\n+import { MdDelete } from \"react-icons/md\";\n+import { Todo } from \"./TodoList\";\n+import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n+import { BASE_URL } from \"../App\";\n+\n+const TodoItem = ({ todo }: { todo: Todo }) => {\n+  const queryClient = useQueryClient();\n+\n+  const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+    mutationKey: [\"updateTodo\"],\n+    mutationFn: async () => {\n+      if (todo.completed) return alert(\"Todo is already completed\");\n+      try {\n+        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+          method: \"PATCH\",\n+        });\n+        const data = await res.json();\n+        if (!res.ok) {\n+          throw new Error(data.error || \"Something went wrong\");\n+        }\n+        return data;\n+      } catch (error) {\n+        console.log(error);\n+      }\n+    },\n+    onSuccess: () => {\n+      queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+    },\n+  });\n+\n+  const { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n+    mutationKey: [\"deleteTodo\"],\n+    mutationFn: async () => {\n+      try {\n+        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+          method: \"DELETE\",\n+        });\n+        const data = await res.json();\n+        if (!res.ok) {\n+          throw new Error(data.error || \"Something went wrong\");\n+        }\n+        return data;\n+      } catch (error) {\n+        console.log(error);\n+      }\n+    },\n+    onSuccess: () => {\n+      queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+    },\n+  });\n+\n+  return (\n+    <Flex gap={2} alignItems={\"center\"}>\n+      <Flex\n+        flex={1}\n+        alignItems={\"center\"}\n+        border={\"1px\"}\n+        borderColor={\"gray.600\"}\n+        p={2}\n+        borderRadius={\"lg\"}\n+        justifyContent={\"space-between\"}\n+      >\n+        <Text\n+          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n+          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n+        >\n+          {todo.body}\n+        </Text>\n+        {todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"green\">\n+            Done\n+          </Badge>\n+        )}\n+        {!todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"yellow\">\n+            In Progress\n+          </Badge>\n+        )}\n+      </Flex>\n+      <Flex gap={2} alignItems={\"center\"}>\n+        <Box\n+          color={\"green.500\"}\n+          cursor={\"pointer\"}\n+          onClick={() => updateTodo()}\n+        >\n+          {!isUpdating && <FaCheckCircle size={20} />}\n+          {isUpdating && <Spinner size={\"sm\"} />}\n+        </Box>\n+        <Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n+          {!isDeleting && <MdDelete size={25} />}\n+          {isDeleting && <Spinner size={\"sm\"} />}\n+        </Box>\n+      </Flex>\n+    </Flex>\n+  );\n+};\n+export default TodoItem;\n+\n+// STARTER CODE:\n+\n+// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n+// import { FaCheckCircle } from \"react-icons/fa\";\n+// import { MdDelete } from \"react-icons/md\";\n+// import { Todo } from \"./TodoList\";\n+// import { useMutation } from \"@tanstack/react-query\";\n+// import { BASE_URL } from \"../App\";\n+\n+// const TodoItem = ({ todo }: { todo: Todo }) => {\n+//   const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+//     mutationKey: [\"updateTodo\"],\n+//     mutationFn: async () => {\n+//       if (todo.completed) return alert(\"Todo is already completed, good job!\");\n+//       try {\n+//         const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+//           method: \"PATCH\",\n+//         });\n+//         const data = await res.json();\n+//         if (!res.ok) {\n+//           throw new Error(data.error || \"Something went wrong\");\n+//         }\n+//         return data;\n+//       } catch (error) {\n+//         console.log(error);\n+//       }\n+//     },\n+//   });\n+//   return (\n+//     <Flex gap={2} alignItems={\"center\"}>\n+//       <Flex\n+//         flex={1}\n+//         alignItems={\"center\"}\n+//         border={\"1px\"}\n+//         borderColor={\"gray.600\"}\n+//         p={2}\n+//         borderRadius={\"lg\"}\n+//         justifyContent={\"space-between\"}\n+//       >\n+//         <Text\n+//           color={todo.completed ? \"green.200\" : \"yellow.100\"}\n+//           textDecoration={todo.completed ? \"line-through\" : \"none\"}\n+//         >\n+//           {todo.body}\n+//         </Text>\n+//         {todo.completed && (\n+//           <Badge ml=\"1\" colorScheme=\"green\">\n+//             Done\n+//           </Badge>\n+//         )}\n+//         {!todo.completed && (\n+//           <Badge ml=\"1\" colorScheme=\"yellow\">\n+//             In Progress\n+//           </Badge>\n+//         )}\n+//       </Flex>\n+//       <Flex gap={2} alignItems={\"center\"}>\n+//         <Box\n+//           color={\"green.500\"}\n+//           cursor={\"pointer\"}\n+//           onClick={() => updateTodo()}\n+//         >\n+//           {!isUpdating && <FaCheckCircle size={20} />}\n+//           {!isUpdating && <Spinner size={\"sm\"} />}\n+//         </Box>\n+//         <Box color={\"red.500\"} cursor={\"pointer\"}>\n+//           <MdDelete size={25} />\n+//         </Box>\n+//       </Flex>\n+//     </Flex>\n+//   );\n+// };\n+// export default TodoItem;\n"
                },
                {
                    "date": 1717965093843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,11 @@\n           method: \"PATCH\",\n         });\n         const data = await res.json();\n         if (!res.ok) {\n-          throw new Error(data.error || \"Something went wrong\");\n+          throw new Error(\n+            data.error || \"Something went wrong, please try again later.\"\n+          );\n         }\n         return data;\n       } catch (error) {\n         console.log(error);\n"
                },
                {
                    "date": 1717965103955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,11 @@\n           method: \"DELETE\",\n         });\n         const data = await res.json();\n         if (!res.ok) {\n-          throw new Error(data.error || \"Something went wrong\");\n+          throw new Error(\n+            data.error || \"Something went wrong, please try again later.\"\n+          );\n         }\n         return data;\n       } catch (error) {\n         console.log(error);\n@@ -172,342 +174,4 @@\n //     </Flex>\n //   );\n // };\n // export default TodoItem;\n-// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n-// import { FaCheckCircle } from \"react-icons/fa\";\n-// import { MdDelete } from \"react-icons/md\";\n-// import { Todo } from \"./TodoList\";\n-// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n-// import { BASE_URL } from \"../App\";\n-\n-// const TodoItem = ({ todo }: { todo: Todo }) => {\n-// \tconst queryClient = useQueryClient();\n-\n-// \tconst { mutate: updateTodo, isPending: isUpdating } = useMutation({\n-// \t\tmutationKey: [\"updateTodo\"],\n-// \t\tmutationFn: async () => {\n-// \t\t\tif (todo.completed) return alert(\"Todo is already completed\");\n-// \t\t\ttry {\n-// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-// \t\t\t\t\tmethod: \"PATCH\",\n-// \t\t\t\t});\n-// \t\t\t\tconst data = await res.json();\n-// \t\t\t\tif (!res.ok) {\n-// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n-// \t\t\t\t}\n-// \t\t\t\treturn data;\n-// \t\t\t} catch (error) {\n-// \t\t\t\tconsole.log(error);\n-// \t\t\t}\n-// \t\t},\n-// \t\tonSuccess: () => {\n-// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-// \t\t},\n-// \t});\n-\n-// \tconst { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n-// \t\tmutationKey: [\"deleteTodo\"],\n-// \t\tmutationFn: async () => {\n-// \t\t\ttry {\n-// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-// \t\t\t\t\tmethod: \"DELETE\",\n-// \t\t\t\t});\n-// \t\t\t\tconst data = await res.json();\n-// \t\t\t\tif (!res.ok) {\n-// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n-// \t\t\t\t}\n-// \t\t\t\treturn data;\n-// \t\t\t} catch (error) {\n-// \t\t\t\tconsole.log(error);\n-// \t\t\t}\n-// \t\t},\n-// \t\tonSuccess: () => {\n-// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-// \t\t},\n-// \t});\n-\n-// \treturn (\n-// \t\t<Flex gap={2} alignItems={\"center\"}>\n-// \t\t\t<Flex\n-// \t\t\t\tflex={1}\n-// \t\t\t\talignItems={\"center\"}\n-// \t\t\t\tborder={\"1px\"}\n-// \t\t\t\tborderColor={\"gray.600\"}\n-// \t\t\t\tp={2}\n-// \t\t\t\tborderRadius={\"lg\"}\n-// \t\t\t\tjustifyContent={\"space-between\"}\n-// \t\t\t>\n-// \t\t\t\t<Text\n-// \t\t\t\t\tcolor={todo.completed ? \"green.200\" : \"yellow.100\"}\n-// \t\t\t\t\ttextDecoration={todo.completed ? \"line-through\" : \"none\"}\n-// \t\t\t\t>\n-// \t\t\t\t\t{todo.body}\n-// \t\t\t\t</Text>\n-// \t\t\t\t{todo.completed && (\n-// \t\t\t\t\t<Badge ml='1' colorScheme='green'>\n-// \t\t\t\t\t\tDone\n-// \t\t\t\t\t</Badge>\n-// \t\t\t\t)}\n-// \t\t\t\t{!todo.completed && (\n-// \t\t\t\t\t<Badge ml='1' colorScheme='yellow'>\n-// \t\t\t\t\t\tIn Progress\n-// \t\t\t\t\t</Badge>\n-// \t\t\t\t)}\n-// \t\t\t</Flex>\n-// \t\t\t<Flex gap={2} alignItems={\"center\"}>\n-// \t\t\t\t<Box color={\"green.500\"} cursor={\"pointer\"} onClick={() => updateTodo()}>\n-// \t\t\t\t\t{!isUpdating && <FaCheckCircle size={20} />}\n-// \t\t\t\t\t{isUpdating && <Spinner size={\"sm\"} />}\n-// \t\t\t\t</Box>\n-// \t\t\t\t<Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n-// \t\t\t\t\t{!isDeleting && <MdDelete size={25} />}\n-// \t\t\t\t\t{isDeleting && <Spinner size={\"sm\"} />}\n-// \t\t\t\t</Box>\n-// \t\t\t</Flex>\n-// \t\t</Flex>\n-// \t);\n-// };\n-// export default TodoItem;\n-\n-// STARTER CODE:\n-\n-import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n-import { FaCheckCircle } from \"react-icons/fa\";\n-import { MdDelete } from \"react-icons/md\";\n-import { Todo } from \"./TodoList\";\n-import { useMutation } from \"@tanstack/react-query\";\n-import { BASE_URL } from \"../App\";\n-\n-const TodoItem = ({ todo }: { todo: Todo }) => {\n-  const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n-    mutationKey: [\"updateTodo\"],\n-    mutationFn: async () => {\n-      if (todo.completed) return alert(\"Todo is already completed, good job!\");\n-      try {\n-        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-          method: \"PATCH\",\n-        });\n-        const data = await res.json();\n-        if (!res.ok) {\n-          throw new Error(data.error || \"Something went wrong\");\n-        }\n-        return data;\n-      } catch (error) {\n-        console.log(error);\n-      }\n-    },\n-  });\n-  return (\n-    <Flex gap={2} alignItems={\"center\"}>\n-      <Flex\n-        flex={1}\n-        alignItems={\"center\"}\n-        border={\"1px\"}\n-        borderColor={\"gray.600\"}\n-        p={2}\n-        borderRadius={\"lg\"}\n-        justifyContent={\"space-between\"}\n-      >\n-        <Text\n-          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n-          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n-        >\n-          {todo.body}\n-        </Text>\n-        {todo.completed && (\n-          <Badge ml=\"1\" colorScheme=\"green\">\n-            Done\n-          </Badge>\n-        )}\n-        {!todo.completed && (\n-          <Badge ml=\"1\" colorScheme=\"yellow\">\n-            In Progress\n-          </Badge>\n-        )}\n-      </Flex>\n-      <Flex gap={2} alignItems={\"center\"}>\n-        <Box\n-          color={\"green.500\"}\n-          cursor={\"pointer\"}\n-          onClick={() => updateTodo()}\n-        >\n-          {!isUpdating && <FaCheckCircle size={20} />}\n-          {!isUpdating && <Spinner size={\"sm\"} />}\n-        </Box>\n-        <Box color={\"red.500\"} cursor={\"pointer\"}>\n-          <MdDelete size={25} />\n-        </Box>\n-      </Flex>\n-    </Flex>\n-  );\n-};\n-export default TodoItem;\n-// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n-// import { FaCheckCircle } from \"react-icons/fa\";\n-// import { MdDelete } from \"react-icons/md\";\n-// import { Todo } from \"./TodoList\";\n-// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n-// import { BASE_URL } from \"../App\";\n-\n-// const TodoItem = ({ todo }: { todo: Todo }) => {\n-// \tconst queryClient = useQueryClient();\n-\n-// \tconst { mutate: updateTodo, isPending: isUpdating } = useMutation({\n-// \t\tmutationKey: [\"updateTodo\"],\n-// \t\tmutationFn: async () => {\n-// \t\t\tif (todo.completed) return alert(\"Todo is already completed\");\n-// \t\t\ttry {\n-// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-// \t\t\t\t\tmethod: \"PATCH\",\n-// \t\t\t\t});\n-// \t\t\t\tconst data = await res.json();\n-// \t\t\t\tif (!res.ok) {\n-// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n-// \t\t\t\t}\n-// \t\t\t\treturn data;\n-// \t\t\t} catch (error) {\n-// \t\t\t\tconsole.log(error);\n-// \t\t\t}\n-// \t\t},\n-// \t\tonSuccess: () => {\n-// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-// \t\t},\n-// \t});\n-\n-// \tconst { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n-// \t\tmutationKey: [\"deleteTodo\"],\n-// \t\tmutationFn: async () => {\n-// \t\t\ttry {\n-// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-// \t\t\t\t\tmethod: \"DELETE\",\n-// \t\t\t\t});\n-// \t\t\t\tconst data = await res.json();\n-// \t\t\t\tif (!res.ok) {\n-// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n-// \t\t\t\t}\n-// \t\t\t\treturn data;\n-// \t\t\t} catch (error) {\n-// \t\t\t\tconsole.log(error);\n-// \t\t\t}\n-// \t\t},\n-// \t\tonSuccess: () => {\n-// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-// \t\t},\n-// \t});\n-\n-// \treturn (\n-// \t\t<Flex gap={2} alignItems={\"center\"}>\n-// \t\t\t<Flex\n-// \t\t\t\tflex={1}\n-// \t\t\t\talignItems={\"center\"}\n-// \t\t\t\tborder={\"1px\"}\n-// \t\t\t\tborderColor={\"gray.600\"}\n-// \t\t\t\tp={2}\n-// \t\t\t\tborderRadius={\"lg\"}\n-// \t\t\t\tjustifyContent={\"space-between\"}\n-// \t\t\t>\n-// \t\t\t\t<Text\n-// \t\t\t\t\tcolor={todo.completed ? \"green.200\" : \"yellow.100\"}\n-// \t\t\t\t\ttextDecoration={todo.completed ? \"line-through\" : \"none\"}\n-// \t\t\t\t>\n-// \t\t\t\t\t{todo.body}\n-// \t\t\t\t</Text>\n-// \t\t\t\t{todo.completed && (\n-// \t\t\t\t\t<Badge ml='1' colorScheme='green'>\n-// \t\t\t\t\t\tDone\n-// \t\t\t\t\t</Badge>\n-// \t\t\t\t)}\n-// \t\t\t\t{!todo.completed && (\n-// \t\t\t\t\t<Badge ml='1' colorScheme='yellow'>\n-// \t\t\t\t\t\tIn Progress\n-// \t\t\t\t\t</Badge>\n-// \t\t\t\t)}\n-// \t\t\t</Flex>\n-// \t\t\t<Flex gap={2} alignItems={\"center\"}>\n-// \t\t\t\t<Box color={\"green.500\"} cursor={\"pointer\"} onClick={() => updateTodo()}>\n-// \t\t\t\t\t{!isUpdating && <FaCheckCircle size={20} />}\n-// \t\t\t\t\t{isUpdating && <Spinner size={\"sm\"} />}\n-// \t\t\t\t</Box>\n-// \t\t\t\t<Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n-// \t\t\t\t\t{!isDeleting && <MdDelete size={25} />}\n-// \t\t\t\t\t{isDeleting && <Spinner size={\"sm\"} />}\n-// \t\t\t\t</Box>\n-// \t\t\t</Flex>\n-// \t\t</Flex>\n-// \t);\n-// };\n-// export default TodoItem;\n-\n-// STARTER CODE:\n-\n-import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n-import { FaCheckCircle } from \"react-icons/fa\";\n-import { MdDelete } from \"react-icons/md\";\n-import { Todo } from \"./TodoList\";\n-import { useMutation } from \"@tanstack/react-query\";\n-import { BASE_URL } from \"../App\";\n-\n-const TodoItem = ({ todo }: { todo: Todo }) => {\n-  const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n-    mutationKey: [\"updateTodo\"],\n-    mutationFn: async () => {\n-      if (todo.completed) return alert(\"Todo is already completed, good job!\");\n-      try {\n-        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-          method: \"PATCH\",\n-        });\n-        const data = await res.json();\n-        if (!res.ok) {\n-          throw new Error(data.error || \"Something went wrong\");\n-        }\n-        return data;\n-      } catch (error) {\n-        console.log(error);\n-      }\n-    },\n-  });\n-  return (\n-    <Flex gap={2} alignItems={\"center\"}>\n-      <Flex\n-        flex={1}\n-        alignItems={\"center\"}\n-        border={\"1px\"}\n-        borderColor={\"gray.600\"}\n-        p={2}\n-        borderRadius={\"lg\"}\n-        justifyContent={\"space-between\"}\n-      >\n-        <Text\n-          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n-          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n-        >\n-          {todo.body}\n-        </Text>\n-        {todo.completed && (\n-          <Badge ml=\"1\" colorScheme=\"green\">\n-            Done\n-          </Badge>\n-        )}\n-        {!todo.completed && (\n-          <Badge ml=\"1\" colorScheme=\"yellow\">\n-            In Progress\n-          </Badge>\n-        )}\n-      </Flex>\n-      <Flex gap={2} alignItems={\"center\"}>\n-        <Box\n-          color={\"green.500\"}\n-          cursor={\"pointer\"}\n-          onClick={() => updateTodo()}\n-        >\n-          {!isUpdating && <FaCheckCircle size={20} />}\n-          {!isUpdating && <Spinner size={\"sm\"} />}\n-        </Box>\n-        <Box color={\"red.500\"} cursor={\"pointer\"}>\n-          <MdDelete size={25} />\n-        </Box>\n-      </Flex>\n-    </Flex>\n-  );\n-};\n-export default TodoItem;\n"
                },
                {
                    "date": 1717966695018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n+import { FaCheckCircle } from \"react-icons/fa\";\n+import { MdDelete } from \"react-icons/md\";\n+import { Todo } from \"./TodoList\";\n+import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n+import { BASE_URL } from \"../App\";\n+\n+const TodoItem = ({ todo }: { todo: Todo }) => {\n+  const queryClient = useQueryClient();\n+\n+  const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+    mutationKey: [\"updateTodo\"],\n+    mutationFn: async () => {\n+      if (todo.completed) return alert(\"Todo is already completed\");\n+      try {\n+        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+          method: \"PATCH\",\n+        });\n+        const data = await res.json();\n+        if (!res.ok) {\n+          throw new Error(\n+            data.error || \"Something went wrong, please try again later.\"\n+          );\n+        }\n+        return data;\n+      } catch (error) {\n+        console.log(error);\n+      }\n+    },\n+    onSuccess: () => {\n+      queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+    },\n+  });\n+\n+  const { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n+    mutationKey: [\"deleteTodo\"],\n+    mutationFn: async () => {\n+      try {\n+        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+          method: \"DELETE\",\n+        });\n+        const data = await res.json();\n+        if (!res.ok) {\n+          throw new Error(\n+            data.error || \"Something went wrong, please try again later.\"\n+          );\n+        }\n+        return data;\n+      } catch (error) {\n+        console.log(error);\n+      }\n+    },\n+    onSuccess: () => {\n+      queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+    },\n+  });\n+\n+  return (\n+    <Flex gap={2} alignItems={\"center\"}>\n+      <Flex\n+        flex={1}\n+        alignItems={\"center\"}\n+        border={\"1px\"}\n+        borderColor={\"gray.600\"}\n+        p={2}\n+        borderRadius={\"lg\"}\n+        justifyContent={\"space-between\"}\n+      >\n+        <Text\n+          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n+          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n+        >\n+          {todo.body}\n+        </Text>\n+        {todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"green\">\n+            Done\n+          </Badge>\n+        )}\n+        {!todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"yellow\">\n+            In Progress\n+          </Badge>\n+        )}\n+      </Flex>\n+      <Flex gap={2} alignItems={\"center\"}>\n+        <Box\n+          color={\"green.500\"}\n+          cursor={\"pointer\"}\n+          onClick={() => updateTodo()}\n+        >\n+          {!isUpdating && <FaCheckCircle size={20} />}\n+          {isUpdating && <Spinner size={\"la\"} />}\n+        </Box>\n+        <Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n+          {!isDeleting && <MdDelete size={25} />}\n+          {isDeleting && <Spinner size={\"sm\"} />}\n+        </Box>\n+      </Flex>\n+    </Flex>\n+  );\n+};\n+export default TodoItem;\n+\n+// STARTER CODE:\n+\n+// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n+// import { FaCheckCircle } from \"react-icons/fa\";\n+// import { MdDelete } from \"react-icons/md\";\n+// import { Todo } from \"./TodoList\";\n+// import { useMutation } from \"@tanstack/react-query\";\n+// import { BASE_URL } from \"../App\";\n+\n+// const TodoItem = ({ todo }: { todo: Todo }) => {\n+//   const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+//     mutationKey: [\"updateTodo\"],\n+//     mutationFn: async () => {\n+//       if (todo.completed) return alert(\"Todo is already completed, good job!\");\n+//       try {\n+//         const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+//           method: \"PATCH\",\n+//         });\n+//         const data = await res.json();\n+//         if (!res.ok) {\n+//           throw new Error(data.error || \"Something went wrong\");\n+//         }\n+//         return data;\n+//       } catch (error) {\n+//         console.log(error);\n+//       }\n+//     },\n+//   });\n+//   return (\n+//     <Flex gap={2} alignItems={\"center\"}>\n+//       <Flex\n+//         flex={1}\n+//         alignItems={\"center\"}\n+//         border={\"1px\"}\n+//         borderColor={\"gray.600\"}\n+//         p={2}\n+//         borderRadius={\"lg\"}\n+//         justifyContent={\"space-between\"}\n+//       >\n+//         <Text\n+//           color={todo.completed ? \"green.200\" : \"yellow.100\"}\n+//           textDecoration={todo.completed ? \"line-through\" : \"none\"}\n+//         >\n+//           {todo.body}\n+//         </Text>\n+//         {todo.completed && (\n+//           <Badge ml=\"1\" colorScheme=\"green\">\n+//             Done\n+//           </Badge>\n+//         )}\n+//         {!todo.completed && (\n+//           <Badge ml=\"1\" colorScheme=\"yellow\">\n+//             In Progress\n+//           </Badge>\n+//         )}\n+//       </Flex>\n+//       <Flex gap={2} alignItems={\"center\"}>\n+//         <Box\n+//           color={\"green.500\"}\n+//           cursor={\"pointer\"}\n+//           onClick={() => updateTodo()}\n+//         >\n+//           {!isUpdating && <FaCheckCircle size={20} />}\n+//           {!isUpdating && <Spinner size={\"sm\"} />}\n+//         </Box>\n+//         <Box color={\"red.500\"} cursor={\"pointer\"}>\n+//           <MdDelete size={25} />\n+//         </Box>\n+//       </Flex>\n+//     </Flex>\n+//   );\n+// };\n+// export default TodoItem;\n"
                },
                {
                    "date": 1717966700797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,185 +89,8 @@\n           cursor={\"pointer\"}\n           onClick={() => updateTodo()}\n         >\n           {!isUpdating && <FaCheckCircle size={20} />}\n-          {isUpdating && <Spinner size={\"la\"} />}\n-        </Box>\n-        <Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n-          {!isDeleting && <MdDelete size={25} />}\n-          {isDeleting && <Spinner size={\"sm\"} />}\n-        </Box>\n-      </Flex>\n-    </Flex>\n-  );\n-};\n-export default TodoItem;\n-\n-// STARTER CODE:\n-\n-// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n-// import { FaCheckCircle } from \"react-icons/fa\";\n-// import { MdDelete } from \"react-icons/md\";\n-// import { Todo } from \"./TodoList\";\n-// import { useMutation } from \"@tanstack/react-query\";\n-// import { BASE_URL } from \"../App\";\n-\n-// const TodoItem = ({ todo }: { todo: Todo }) => {\n-//   const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n-//     mutationKey: [\"updateTodo\"],\n-//     mutationFn: async () => {\n-//       if (todo.completed) return alert(\"Todo is already completed, good job!\");\n-//       try {\n-//         const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-//           method: \"PATCH\",\n-//         });\n-//         const data = await res.json();\n-//         if (!res.ok) {\n-//           throw new Error(data.error || \"Something went wrong\");\n-//         }\n-//         return data;\n-//       } catch (error) {\n-//         console.log(error);\n-//       }\n-//     },\n-//   });\n-//   return (\n-//     <Flex gap={2} alignItems={\"center\"}>\n-//       <Flex\n-//         flex={1}\n-//         alignItems={\"center\"}\n-//         border={\"1px\"}\n-//         borderColor={\"gray.600\"}\n-//         p={2}\n-//         borderRadius={\"lg\"}\n-//         justifyContent={\"space-between\"}\n-//       >\n-//         <Text\n-//           color={todo.completed ? \"green.200\" : \"yellow.100\"}\n-//           textDecoration={todo.completed ? \"line-through\" : \"none\"}\n-//         >\n-//           {todo.body}\n-//         </Text>\n-//         {todo.completed && (\n-//           <Badge ml=\"1\" colorScheme=\"green\">\n-//             Done\n-//           </Badge>\n-//         )}\n-//         {!todo.completed && (\n-//           <Badge ml=\"1\" colorScheme=\"yellow\">\n-//             In Progress\n-//           </Badge>\n-//         )}\n-//       </Flex>\n-//       <Flex gap={2} alignItems={\"center\"}>\n-//         <Box\n-//           color={\"green.500\"}\n-//           cursor={\"pointer\"}\n-//           onClick={() => updateTodo()}\n-//         >\n-//           {!isUpdating && <FaCheckCircle size={20} />}\n-//           {!isUpdating && <Spinner size={\"sm\"} />}\n-//         </Box>\n-//         <Box color={\"red.500\"} cursor={\"pointer\"}>\n-//           <MdDelete size={25} />\n-//         </Box>\n-//       </Flex>\n-//     </Flex>\n-//   );\n-// };\n-// export default TodoItem;\n-import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n-import { FaCheckCircle } from \"react-icons/fa\";\n-import { MdDelete } from \"react-icons/md\";\n-import { Todo } from \"./TodoList\";\n-import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n-import { BASE_URL } from \"../App\";\n-\n-const TodoItem = ({ todo }: { todo: Todo }) => {\n-  const queryClient = useQueryClient();\n-\n-  const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n-    mutationKey: [\"updateTodo\"],\n-    mutationFn: async () => {\n-      if (todo.completed) return alert(\"Todo is already completed\");\n-      try {\n-        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-          method: \"PATCH\",\n-        });\n-        const data = await res.json();\n-        if (!res.ok) {\n-          throw new Error(\n-            data.error || \"Something went wrong, please try again later.\"\n-          );\n-        }\n-        return data;\n-      } catch (error) {\n-        console.log(error);\n-      }\n-    },\n-    onSuccess: () => {\n-      queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-    },\n-  });\n-\n-  const { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n-    mutationKey: [\"deleteTodo\"],\n-    mutationFn: async () => {\n-      try {\n-        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n-          method: \"DELETE\",\n-        });\n-        const data = await res.json();\n-        if (!res.ok) {\n-          throw new Error(\n-            data.error || \"Something went wrong, please try again later.\"\n-          );\n-        }\n-        return data;\n-      } catch (error) {\n-        console.log(error);\n-      }\n-    },\n-    onSuccess: () => {\n-      queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n-    },\n-  });\n-\n-  return (\n-    <Flex gap={2} alignItems={\"center\"}>\n-      <Flex\n-        flex={1}\n-        alignItems={\"center\"}\n-        border={\"1px\"}\n-        borderColor={\"gray.600\"}\n-        p={2}\n-        borderRadius={\"lg\"}\n-        justifyContent={\"space-between\"}\n-      >\n-        <Text\n-          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n-          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n-        >\n-          {todo.body}\n-        </Text>\n-        {todo.completed && (\n-          <Badge ml=\"1\" colorScheme=\"green\">\n-            Done\n-          </Badge>\n-        )}\n-        {!todo.completed && (\n-          <Badge ml=\"1\" colorScheme=\"yellow\">\n-            In Progress\n-          </Badge>\n-        )}\n-      </Flex>\n-      <Flex gap={2} alignItems={\"center\"}>\n-        <Box\n-          color={\"green.500\"}\n-          cursor={\"pointer\"}\n-          onClick={() => updateTodo()}\n-        >\n-          {!isUpdating && <FaCheckCircle size={20} />}\n           {isUpdating && <Spinner size={\"sm\"} />}\n         </Box>\n         <Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n           {!isDeleting && <MdDelete size={25} />}\n"
                },
                {
                    "date": 1717969454334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n+import { FaCheckCircle } from \"react-icons/fa\";\n+import { MdDelete } from \"react-icons/md\";\n+import { Todo } from \"./TodoList\";\n+import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n+import { BASE_URL } from \"../App\";\n+\n+const TodoItem = ({ todo }: { todo: Todo }) => {\n+  const queryClient = useQueryClient();\n+\n+  const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+    mutationKey: [\"updateTodo\"],\n+    mutationFn: async () => {\n+      if (todo.completed) return alert(\"Todo is already completed\");\n+      try {\n+        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+          method: \"PATCH\",\n+        });\n+        const data = await res.json();\n+        if (!res.ok) {\n+          throw new Error(\n+            data.error || \"Something went wrong, please try again later.\"\n+          );\n+        }\n+        return data;\n+      } catch (error) {\n+        console.log(error);\n+      }\n+    },\n+    //removes need to refresh to show \"done\"\n+    onSuccess: () => {\n+      queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+    },\n+  });\n+\n+  const { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n+    mutationKey: [\"deleteTodo\"],\n+    mutationFn: async () => {\n+      try {\n+        const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+          method: \"DELETE\",\n+        });\n+        const data = await res.json();\n+        if (!res.ok) {\n+          throw new Error(\n+            data.error || \"Something went wrong, please try again later.\"\n+          );\n+        }\n+        return data;\n+      } catch (error) {\n+        console.log(error);\n+      }\n+    },\n+    onSuccess: () => {\n+      queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n+    },\n+  });\n+\n+  return (\n+    <Flex gap={2} alignItems={\"center\"}>\n+      <Flex\n+        flex={1}\n+        alignItems={\"center\"}\n+        border={\"1px\"}\n+        borderColor={\"gray.600\"}\n+        p={2}\n+        borderRadius={\"lg\"}\n+        justifyContent={\"space-between\"}\n+      >\n+        <Text\n+          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n+          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n+        >\n+          {todo.body}\n+        </Text>\n+        {todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"green\">\n+            Done\n+          </Badge>\n+        )}\n+        {!todo.completed && (\n+          <Badge ml=\"1\" colorScheme=\"yellow\">\n+            In Progress\n+          </Badge>\n+        )}\n+      </Flex>\n+      <Flex gap={2} alignItems={\"center\"}>\n+        <Box\n+          color={\"green.500\"}\n+          cursor={\"pointer\"}\n+          onClick={() => updateTodo()}\n+        >\n+          {!isUpdating && <FaCheckCircle size={20} />}\n+          {isUpdating && <Spinner size={\"sm\"} />}\n+        </Box>\n+        <Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n+          {!isDeleting && <MdDelete size={25} />}\n+          {isDeleting && <Spinner size={\"sm\"} />}\n+        </Box>\n+      </Flex>\n+    </Flex>\n+  );\n+};\n+export default TodoItem;\n+\n+// STARTER CODE:\n+\n+// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n+// import { FaCheckCircle } from \"react-icons/fa\";\n+// import { MdDelete } from \"react-icons/md\";\n+// import { Todo } from \"./TodoList\";\n+// import { useMutation } from \"@tanstack/react-query\";\n+// import { BASE_URL } from \"../App\";\n+\n+// const TodoItem = ({ todo }: { todo: Todo }) => {\n+//   const { mutate: updateTodo, isPending: isUpdating } = useMutation({\n+//     mutationKey: [\"updateTodo\"],\n+//     mutationFn: async () => {\n+//       if (todo.completed) return alert(\"Todo is already completed, good job!\");\n+//       try {\n+//         const res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n+//           method: \"PATCH\",\n+//         });\n+//         const data = await res.json();\n+//         if (!res.ok) {\n+//           throw new Error(data.error || \"Something went wrong\");\n+//         }\n+//         return data;\n+//       } catch (error) {\n+//         console.log(error);\n+//       }\n+//     },\n+//   });\n+//   return (\n+//     <Flex gap={2} alignItems={\"center\"}>\n+//       <Flex\n+//         flex={1}\n+//         alignItems={\"center\"}\n+//         border={\"1px\"}\n+//         borderColor={\"gray.600\"}\n+//         p={2}\n+//         borderRadius={\"lg\"}\n+//         justifyContent={\"space-between\"}\n+//       >\n+//         <Text\n+//           color={todo.completed ? \"green.200\" : \"yellow.100\"}\n+//           textDecoration={todo.completed ? \"line-through\" : \"none\"}\n+//         >\n+//           {todo.body}\n+//         </Text>\n+//         {todo.completed && (\n+//           <Badge ml=\"1\" colorScheme=\"green\">\n+//             Done\n+//           </Badge>\n+//         )}\n+//         {!todo.completed && (\n+//           <Badge ml=\"1\" colorScheme=\"yellow\">\n+//             In Progress\n+//           </Badge>\n+//         )}\n+//       </Flex>\n+//       <Flex gap={2} alignItems={\"center\"}>\n+//         <Box\n+//           color={\"green.500\"}\n+//           cursor={\"pointer\"}\n+//           onClick={() => updateTodo()}\n+//         >\n+//           {!isUpdating && <FaCheckCircle size={20} />}\n+//           {!isUpdating && <Spinner size={\"sm\"} />}\n+//         </Box>\n+//         <Box color={\"red.500\"} cursor={\"pointer\"}>\n+//           <MdDelete size={25} />\n+//         </Box>\n+//       </Flex>\n+//     </Flex>\n+//   );\n+// };\n+// export default TodoItem;\n"
                }
            ],
            "date": 1717912494186,
            "name": "Commit-0",
            "content": "// import { Badge, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n// import { FaCheckCircle } from \"react-icons/fa\";\n// import { MdDelete } from \"react-icons/md\";\n// import { Todo } from \"./TodoList\";\n// import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n// import { BASE_URL } from \"../App\";\n\n// const TodoItem = ({ todo }: { todo: Todo }) => {\n// \tconst queryClient = useQueryClient();\n\n// \tconst { mutate: updateTodo, isPending: isUpdating } = useMutation({\n// \t\tmutationKey: [\"updateTodo\"],\n// \t\tmutationFn: async () => {\n// \t\t\tif (todo.completed) return alert(\"Todo is already completed\");\n// \t\t\ttry {\n// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n// \t\t\t\t\tmethod: \"PATCH\",\n// \t\t\t\t});\n// \t\t\t\tconst data = await res.json();\n// \t\t\t\tif (!res.ok) {\n// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n// \t\t\t\t}\n// \t\t\t\treturn data;\n// \t\t\t} catch (error) {\n// \t\t\t\tconsole.log(error);\n// \t\t\t}\n// \t\t},\n// \t\tonSuccess: () => {\n// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n// \t\t},\n// \t});\n\n// \tconst { mutate: deleteTodo, isPending: isDeleting } = useMutation({\n// \t\tmutationKey: [\"deleteTodo\"],\n// \t\tmutationFn: async () => {\n// \t\t\ttry {\n// \t\t\t\tconst res = await fetch(BASE_URL + `/todos/${todo._id}`, {\n// \t\t\t\t\tmethod: \"DELETE\",\n// \t\t\t\t});\n// \t\t\t\tconst data = await res.json();\n// \t\t\t\tif (!res.ok) {\n// \t\t\t\t\tthrow new Error(data.error || \"Something went wrong\");\n// \t\t\t\t}\n// \t\t\t\treturn data;\n// \t\t\t} catch (error) {\n// \t\t\t\tconsole.log(error);\n// \t\t\t}\n// \t\t},\n// \t\tonSuccess: () => {\n// \t\t\tqueryClient.invalidateQueries({ queryKey: [\"todos\"] });\n// \t\t},\n// \t});\n\n// \treturn (\n// \t\t<Flex gap={2} alignItems={\"center\"}>\n// \t\t\t<Flex\n// \t\t\t\tflex={1}\n// \t\t\t\talignItems={\"center\"}\n// \t\t\t\tborder={\"1px\"}\n// \t\t\t\tborderColor={\"gray.600\"}\n// \t\t\t\tp={2}\n// \t\t\t\tborderRadius={\"lg\"}\n// \t\t\t\tjustifyContent={\"space-between\"}\n// \t\t\t>\n// \t\t\t\t<Text\n// \t\t\t\t\tcolor={todo.completed ? \"green.200\" : \"yellow.100\"}\n// \t\t\t\t\ttextDecoration={todo.completed ? \"line-through\" : \"none\"}\n// \t\t\t\t>\n// \t\t\t\t\t{todo.body}\n// \t\t\t\t</Text>\n// \t\t\t\t{todo.completed && (\n// \t\t\t\t\t<Badge ml='1' colorScheme='green'>\n// \t\t\t\t\t\tDone\n// \t\t\t\t\t</Badge>\n// \t\t\t\t)}\n// \t\t\t\t{!todo.completed && (\n// \t\t\t\t\t<Badge ml='1' colorScheme='yellow'>\n// \t\t\t\t\t\tIn Progress\n// \t\t\t\t\t</Badge>\n// \t\t\t\t)}\n// \t\t\t</Flex>\n// \t\t\t<Flex gap={2} alignItems={\"center\"}>\n// \t\t\t\t<Box color={\"green.500\"} cursor={\"pointer\"} onClick={() => updateTodo()}>\n// \t\t\t\t\t{!isUpdating && <FaCheckCircle size={20} />}\n// \t\t\t\t\t{isUpdating && <Spinner size={\"sm\"} />}\n// \t\t\t\t</Box>\n// \t\t\t\t<Box color={\"red.500\"} cursor={\"pointer\"} onClick={() => deleteTodo()}>\n// \t\t\t\t\t{!isDeleting && <MdDelete size={25} />}\n// \t\t\t\t\t{isDeleting && <Spinner size={\"sm\"} />}\n// \t\t\t\t</Box>\n// \t\t\t</Flex>\n// \t\t</Flex>\n// \t);\n// };\n// export default TodoItem;\n\n// STARTER CODE:\n\nimport { Badge, Box, Flex, Text } from \"@chakra-ui/react\";\nimport { FaCheckCircle } from \"react-icons/fa\";\nimport { MdDelete } from \"react-icons/md\";\n\nconst TodoItem = ({ todo }: { todo: any }) => {\n  return (\n    <Flex gap={2} alignItems={\"center\"}>\n      <Flex\n        flex={1}\n        alignItems={\"center\"}\n        border={\"1px\"}\n        borderColor={\"gray.600\"}\n        p={2}\n        borderRadius={\"lg\"}\n        justifyContent={\"space-between\"}\n      >\n        <Text\n          color={todo.completed ? \"green.200\" : \"yellow.100\"}\n          textDecoration={todo.completed ? \"line-through\" : \"none\"}\n        >\n          {todo.body}\n        </Text>\n        {todo.completed && (\n          <Badge ml=\"1\" colorScheme=\"green\">\n            Done\n          </Badge>\n        )}\n        {!todo.completed && (\n          <Badge ml=\"1\" colorScheme=\"yellow\">\n            In Progress\n          </Badge>\n        )}\n      </Flex>\n      <Flex gap={2} alignItems={\"center\"}>\n        <Box color={\"green.500\"} cursor={\"pointer\"}>\n          <FaCheckCircle size={20} />\n        </Box>\n        <Box color={\"red.500\"} cursor={\"pointer\"}>\n          <MdDelete size={25} />\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\nexport default TodoItem;\n"
        }
    ]
}