{
    "sourceFile": "main.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1717601365986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717630085071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \t\"github.com/gofiber/fiber/v2\"\n )\n \n func main(){\n-\tfmt.Println(\"Hello World\")\n+\tfmt.Println(\"Hello Worlds\")\n \n \tmyName  := \"Anurag Kejriwal\"\n \n \tfmt.Println((myName))\n"
                },
                {
                    "date": 1717630333986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,6 +14,11 @@\n \n \tfmt.Println((myName))\n \n \tapp := fiber.New()\n+\n+\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n+\t})\n+\n \tlog.Fatal(app.Listen(\":4000\"))\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717630687488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,17 +7,17 @@\n \t\"github.com/gofiber/fiber/v2\"\n )\n \n func main(){\n-\tfmt.Println(\"Hello Worlds\")\n+\tfmt.Println(\"Hello World\")\n \n \tmyName  := \"Anurag Kejriwal\"\n \n \tfmt.Println((myName))\n \n \tapp := fiber.New()\n \n-\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n \t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n \t})\n \n \tlog.Fatal(app.Listen(\":4000\"))\n"
                },
                {
                    "date": 1717630821859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"log\"\n+\n+\t\"github.com/gofiber/fiber/v2\"\n+)\n+\n+type Todo struct{\n+\tID int `json:\"id\"`\n+\tCompleted bool `json:\"completed\"`\n+\tBody string `json:\"body\"`\n+}\n+\n+func main(){\n+\t//boilerplate setup\n+\tfmt.Println(\"Hello World\")\n+\n+\tmyName  := \"Anurag Kejriwal\"\n+\n+\tfmt.Println((myName))\n+\n+\tapp := fiber.New()\n+\n+\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n+\t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n+\t})\n+\n+\t//listening on Port 4000\n+\tlog.Fatal(app.Listen(\":4000\"))\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717630841928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,19 +6,19 @@\n \n \t\"github.com/gofiber/fiber/v2\"\n )\n \n-type Todo struct{\n-\tID int `json:\"id\"`\n-\tCompleted bool `json:\"completed\"`\n-\tBody string `json:\"body\"`\n+type Todo struct {\n+\tID        int    `json:\"id\"`\n+\tCompleted bool   `json:\"completed\"`\n+\tBody      string `json:\"body\"`\n }\n \n-func main(){\n+func main() {\n \t//boilerplate setup\n \tfmt.Println(\"Hello World\")\n \n-\tmyName  := \"Anurag Kejriwal\"\n+\tmyName := \"Anurag Kejriwal\"\n \n \tfmt.Println((myName))\n \n \tapp := fiber.New()\n@@ -29,28 +29,4 @@\n \n \t//listening on Port 4000\n \tlog.Fatal(app.Listen(\":4000\"))\n }\n-package main\n-\n-import (\n-\t\"fmt\"\n-\t\"log\"\n-\n-\t\"github.com/gofiber/fiber/v2\"\n-)\n-\n-func main(){\n-\tfmt.Println(\"Hello World\")\n-\n-\tmyName  := \"Anurag Kejriwal\"\n-\n-\tfmt.Println((myName))\n-\n-\tapp := fiber.New()\n-\n-\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n-\t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n-\t})\n-\n-\tlog.Fatal(app.Listen(\":4000\"))\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717631289317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,18 +15,32 @@\n \n func main() {\n \t//boilerplate setup\n \tfmt.Println(\"Hello World\")\n+\tapp := fiber.New()\n \n-\tmyName := \"Anurag Kejriwal\"\n+\ttodos := []Todo{}\n \n-\tfmt.Println((myName))\n-\n-\tapp := fiber.New()\n-\n \tapp.Get(\"/\", func(c *fiber.Ctx) error {\n \t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n \t})\n \n+\tapp.Post(\"/api/todos\", func(c *fiber.Ctx) error {\n+\t\ttodo := &Todo{} //default values: {id: 0, completed: False, body: \"\"}\n+\n+\t\tif err := c.BodyParser(todo); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tif todo.Body == \"\" {\n+\t\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Todo body is required\"})\n+\t\t}\n+\n+\t\ttodo.ID = len(todos) + 1\n+\t\ttodos = append(todos, *todo)\n+\n+\t\treturn c.Status(201).JSON(todo)\n+\t})\n+\n \t//listening on Port 4000\n \tlog.Fatal(app.Listen(\":4000\"))\n }\n"
                },
                {
                    "date": 1717637878363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"log\"\n+\n+\t\"github.com/gofiber/fiber/v2\"\n+)\n+\n+type Todo struct {\n+\tID        int    `json:\"id\"`\n+\tCompleted bool   `json:\"completed\"`\n+\tBody      string `json:\"body\"`\n+}\n+\n+func main() {\n+\t//boilerplate setup\n+\tfmt.Println(\"Hello World\")\n+\tapp := fiber.New()\n+\n+\ttodos := []Todo{}\n+\n+\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n+\t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n+\t})\n+\n+\tapp.Post(\"/api/todos\", func(c *fiber.Ctx) error {\n+\t\ttodo := &Todo{} //default values: {id: 0, completed: False, body: \"\"}\n+\n+\t\tif err := c.BodyParser(todo); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tif todo.Body == \"\" {\n+\t\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Todo body is required\"})\n+\t\t}\n+\n+\t\ttodo.ID = len(todos) + 1\n+\t\ttodos = append(todos, *todo)\n+\n+\t\tvar x int = 5 // 0x0001\n+\n+\t\treturn c.Status(201).JSON(todo)\n+\t})\n+\n+\t//listening on Port 4000\n+\tlog.Fatal(app.Listen(\":4000\"))\n+}\n"
                },
                {
                    "date": 1717638380163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n \tapp.Get(\"/\", func(c *fiber.Ctx) error {\n \t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n \t})\n \n+\t//create a Todo\n \tapp.Post(\"/api/todos\", func(c *fiber.Ctx) error {\n \t\ttodo := &Todo{} //default values: {id: 0, completed: False, body: \"\"}\n \n \t\tif err := c.BodyParser(todo); err != nil {\n@@ -42,52 +43,19 @@\n \n \t\treturn c.Status(201).JSON(todo)\n \t})\n \n-\t//listening on Port 4000\n-\tlog.Fatal(app.Listen(\":4000\"))\n-}\n-package main\n+\t//update a todo\n+\tapp.Patch(\"/api/todos/:id\", func(c *fiber.Ctx) error {\n+\t\tid := c.Params(\"id\")\n \n-import (\n-\t\"fmt\"\n-\t\"log\"\n-\n-\t\"github.com/gofiber/fiber/v2\"\n-)\n-\n-type Todo struct {\n-\tID        int    `json:\"id\"`\n-\tCompleted bool   `json:\"completed\"`\n-\tBody      string `json:\"body\"`\n-}\n-\n-func main() {\n-\t//boilerplate setup\n-\tfmt.Println(\"Hello World\")\n-\tapp := fiber.New()\n-\n-\ttodos := []Todo{}\n-\n-\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n-\t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n-\t})\n-\n-\tapp.Post(\"/api/todos\", func(c *fiber.Ctx) error {\n-\t\ttodo := &Todo{} //default values: {id: 0, completed: False, body: \"\"}\n-\n-\t\tif err := c.BodyParser(todo); err != nil {\n-\t\t\treturn err\n+\t\tfor i, todo := range todos {\n+\t\t\tif fmt.Sprint(todo.ID) == id {\n+\t\t\t\ttodos[i].Completed = true\n+\t\t\t\treturn c.Status(200).JSON(todos[i])\n+\t\t\t}\n \t\t}\n-\n-\t\tif todo.Body == \"\" {\n-\t\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Todo body is required\"})\n-\t\t}\n-\n-\t\ttodo.ID = len(todos) + 1\n-\t\ttodos = append(todos, *todo)\n-\n-\t\treturn c.Status(201).JSON(todo)\n+\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Todo not found\"})\n \t})\n \n \t//listening on Port 4000\n \tlog.Fatal(app.Listen(\":4000\"))\n"
                },
                {
                    "date": 1717638952845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \t\treturn c.Status(201).JSON(todo)\n \t})\n \n \t//update a todo\n-\tapp.Patch(\"/api/todos/:id\", func(c *fiber.Ctx) error {\n+\tapp.Patch(\"/api/todos/id\", func(c *fiber.Ctx) error {\n \t\tid := c.Params(\"id\")\n \n \t\tfor i, todo := range todos {\n \t\t\tif fmt.Sprint(todo.ID) == id {\n"
                },
                {
                    "date": 1717638972422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \t\treturn c.Status(201).JSON(todo)\n \t})\n \n \t//update a todo\n-\tapp.Patch(\"/api/todos/id\", func(c *fiber.Ctx) error {\n+\tapp.Patch(\"/api/todos/:id\", func(c *fiber.Ctx) error {\n \t\tid := c.Params(\"id\")\n \n \t\tfor i, todo := range todos {\n \t\t\tif fmt.Sprint(todo.ID) == id {\n"
                },
                {
                    "date": 1717638991664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"log\"\n+\n+\t\"github.com/gofiber/fiber/v2\"\n+)\n+\n+type Todo struct {\n+\tID        int    `json:\"id\"`\n+\tCompleted bool   `json:\"completed\"`\n+\tBody      string `json:\"body\"`\n+}\n+\n+func main() {\n+\t//boilerplate setup\n+\tfmt.Println(\"Hello World\")\n+\tapp := fiber.New()\n+\n+\ttodos := []Todo{}\n+\n+\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n+\t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n+\t})\n+\n+\t//create a Todo\n+\tapp.Post(\"/api/todos\", func(c *fiber.Ctx) error {\n+\t\ttodo := &Todo{} //default values: {id: 0, completed: False, body: \"\"}\n+\n+\t\tif err := c.BodyParser(todo); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tif todo.Body == \"\" {\n+\t\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Todo body is required\"})\n+\t\t}\n+\n+\t\ttodo.ID = len(todos) + 1\n+\t\ttodos = append(todos, *todo)\n+\n+\t\treturn c.Status(201).JSON(todo)\n+\t})\n+\n+\t//update a todo\n+\tapp.Patch(\"/api/todos/:id\", func(c *fiber.Ctx) error {\n+\t\tid := c.Params(\"id\")\n+\n+\t\tfor i, todo := range todos {\n+\t\t\tif fmt.Sprint(todo.ID) == id {\n+\t\t\t\ttodos[i].Completed = true\n+\t\t\t\treturn c.Status(200).JSON(todos[i])\n+\t\t\t}\n+\t\t}\n+\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Todo not found\"})\n+\t})\n+\n+\t//listening on Port 4000\n+\tlog.Fatal(app.Listen(\":4000\"))\n+}\n"
                },
                {
                    "date": 1717639211717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n \tapp := fiber.New()\n \n \ttodos := []Todo{}\n \n-\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n+\tapp.Get(\"/api/todos\", func(c *fiber.Ctx) error {\n \t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n \t})\n \n \t//create a Todo\n@@ -54,69 +54,11 @@\n \t\t}\n \t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Todo not found\"})\n \t})\n \n-\t//listening on Port 4000\n-\tlog.Fatal(app.Listen(\":4000\"))\n-}\n-package main\n+\t//delete a todo endpoint\n \n-import (\n-\t\"fmt\"\n-\t\"log\"\n+\tapp.Delete(\"/api/todos/:id\")\n \n-\t\"github.com/gofiber/fiber/v2\"\n-)\n-\n-type Todo struct {\n-\tID        int    `json:\"id\"`\n-\tCompleted bool   `json:\"completed\"`\n-\tBody      string `json:\"body\"`\n-}\n-\n-func main() {\n-\t//boilerplate setup\n-\tfmt.Println(\"Hello World\")\n-\tapp := fiber.New()\n-\n-\ttodos := []Todo{}\n-\n-\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n-\t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n-\t})\n-\n-\t//create a Todo\n-\tapp.Post(\"/api/todos\", func(c *fiber.Ctx) error {\n-\t\ttodo := &Todo{} //default values: {id: 0, completed: False, body: \"\"}\n-\n-\t\tif err := c.BodyParser(todo); err != nil {\n-\t\t\treturn err\n-\t\t}\n-\n-\t\tif todo.Body == \"\" {\n-\t\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Todo body is required\"})\n-\t\t}\n-\n-\t\ttodo.ID = len(todos) + 1\n-\t\ttodos = append(todos, *todo)\n-\n-\t\tvar x int = 5 // 0x0001\n-\n-\t\treturn c.Status(201).JSON(todo)\n-\t})\n-\n-\t//update a todo\n-\tapp.Patch(\"/api/todos/:id\", func(c *fiber.Ctx) error {\n-\t\tid := c.Params(\"id\")\n-\n-\t\tfor i, todo := range todos {\n-\t\t\tif fmt.Sprint(todo.ID) == id {\n-\t\t\t\ttodos[i].Completed = true\n-\t\t\t\treturn c.Status(200).JSON(todos[i])\n-\t\t\t}\n-\t\t}\n-\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Todo not found\"})\n-\t})\n-\n \t//listening on Port 4000\n \tlog.Fatal(app.Listen(\":4000\"))\n }\n"
                },
                {
                    "date": 1717639235062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \t})\n \n \t//delete a todo endpoint\n \n-\tapp.Delete(\"/api/todos/:id\")\n+\t// app.Delete(\"/api/todos/:id\")\n \n \t//listening on Port 4000\n \tlog.Fatal(app.Listen(\":4000\"))\n }\n"
                },
                {
                    "date": 1717639284262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"log\"\n+\n+\t\"github.com/gofiber/fiber/v2\"\n+)\n+\n+type Todo struct {\n+\tID        int    `json:\"id\"`\n+\tCompleted bool   `json:\"completed\"`\n+\tBody      string `json:\"body\"`\n+}\n+\n+func main() {\n+\t//boilerplate setup\n+\tfmt.Println(\"Hello World\")\n+\tapp := fiber.New()\n+\n+\ttodos := []Todo{}\n+\n+\tapp.Get(\"/api/todos\", func(c *fiber.Ctx) error {\n+\t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n+\t})\n+\n+\t//create a Todo\n+\tapp.Post(\"/api/todos\", func(c *fiber.Ctx) error {\n+\t\ttodo := &Todo{} //default values: {id: 0, completed: False, body: \"\"}\n+\n+\t\tif err := c.BodyParser(todo); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tif todo.Body == \"\" {\n+\t\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Todo body is required\"})\n+\t\t}\n+\n+\t\ttodo.ID = len(todos) + 1\n+\t\ttodos = append(todos, *todo)\n+\n+\t\treturn c.Status(201).JSON(todo)\n+\t})\n+\n+\t//update a todo\n+\tapp.Patch(\"/api/todos/:id\", func(c *fiber.Ctx) error {\n+\t\tid := c.Params(\"id\")\n+\n+\t\tfor i, todo := range todos {\n+\t\t\tif fmt.Sprint(todo.ID) == id {\n+\t\t\t\ttodos[i].Completed = true\n+\t\t\t\treturn c.Status(200).JSON(todos[i])\n+\t\t\t}\n+\t\t}\n+\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Todo not found\"})\n+\t})\n+\n+\t//delete a todo endpoint\n+\n+\t// app.Delete(\"/api/todos/:id\")\n+\n+\t//listening on Port 4000\n+\tlog.Fatal(app.Listen(\":4000\"))\n+}\n"
                },
                {
                    "date": 1717639291463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,68 +61,4 @@\n \n \t//listening on Port 4000\n \tlog.Fatal(app.Listen(\":4000\"))\n }\n-package main\n-\n-import (\n-\t\"fmt\"\n-\t\"log\"\n-\n-\t\"github.com/gofiber/fiber/v2\"\n-)\n-\n-type Todo struct {\n-\tID        int    `json:\"id\"`\n-\tCompleted bool   `json:\"completed\"`\n-\tBody      string `json:\"body\"`\n-}\n-\n-func main() {\n-\t//boilerplate setup\n-\tfmt.Println(\"Hello World\")\n-\tapp := fiber.New()\n-\n-\ttodos := []Todo{}\n-\n-\tapp.Get(\"/api/todos\", func(c *fiber.Ctx) error {\n-\t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n-\t})\n-\n-\t//create a Todo\n-\tapp.Post(\"/api/todos\", func(c *fiber.Ctx) error {\n-\t\ttodo := &Todo{} //default values: {id: 0, completed: False, body: \"\"}\n-\n-\t\tif err := c.BodyParser(todo); err != nil {\n-\t\t\treturn err\n-\t\t}\n-\n-\t\tif todo.Body == \"\" {\n-\t\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Todo body is required\"})\n-\t\t}\n-\n-\t\ttodo.ID = len(todos) + 1\n-\t\ttodos = append(todos, *todo)\n-\n-\t\treturn c.Status(201).JSON(todo)\n-\t})\n-\n-\t//update a todo\n-\tapp.Patch(\"/api/todos/:id\", func(c *fiber.Ctx) error {\n-\t\tid := c.Params(\"id\")\n-\n-\t\tfor i, todo := range todos {\n-\t\t\tif fmt.Sprint(todo.ID) == id {\n-\t\t\t\ttodos[i].Completed = true\n-\t\t\t\treturn c.Status(200).JSON(todos[i])\n-\t\t\t}\n-\t\t}\n-\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Todo not found\"})\n-\t})\n-\n-\t//delete a todo endpoint\n-\n-\t// app.Delete(\"/api/todos/:id\")\n-\n-\t//listening on Port 4000\n-\tlog.Fatal(app.Listen(\":4000\"))\n-}\n"
                },
                {
                    "date": 1717639713476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,20 @@\n \t})\n \n \t//delete a todo endpoint\n \n-\t// app.Delete(\"/api/todos/:id\")\n+\tapp.Delete(\"/api/todos/:id\", func(c *fiber.Ctx) error {\n+\t\tid := c.Params(\"id\")\n \n+\t\tfor i, todo := range todos {\n+\t\t\tif fmt.Sprint(todo.ID) == id {\n+\t\t\t\t// 1 2 3 4 5 (delete 3 by indexing first 2 and last 2) -> 1 2 4 5\n+\t\t\t\ttodos = append(todos[:i], todos[i+1:]...)\n+\t\t\t\treturn c.Status(200).JSON(fiber.Map{\"success\": true})\n+\t\t\t}\n+\t\t}\n+\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Todo not found\"})\n+\t})\n+\n \t//listening on Port 4000\n \tlog.Fatal(app.Listen(\":4000\"))\n }\n"
                },
                {
                    "date": 1717640363090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n \ttodos := []Todo{}\n \n \tapp.Get(\"/api/todos\", func(c *fiber.Ctx) error {\n-\t\treturn c.Status(200).JSON(fiber.Map{\"msg\": \"hello world\"})\n+\t\treturn c.Status(200).JSON(todos)\n \t})\n \n \t//create a Todo\n \tapp.Post(\"/api/todos\", func(c *fiber.Ctx) error {\n"
                },
                {
                    "date": 1717640895720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n import (\n \t\"fmt\"\n \t\"log\"\n+\t\"os\"\n \n \t\"github.com/gofiber/fiber/v2\"\n )\n \n@@ -17,8 +18,15 @@\n \t//boilerplate setup\n \tfmt.Println(\"Hello World\")\n \tapp := fiber.New()\n \n+\terr := godotenv.Load(\".env\")\n+\tif err != nil{\n+\t\tlog.Fatal(\"Error loading .env file\")\n+\t}\n+\n+\tPORT := os.Getenv(\"PORT\")\n+\n \ttodos := []Todo{}\n \n \tapp.Get(\"/api/todos\", func(c *fiber.Ctx) error {\n \t\treturn c.Status(200).JSON(todos)\n@@ -70,6 +78,6 @@\n \t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Todo not found\"})\n \t})\n \n \t//listening on Port 4000\n-\tlog.Fatal(app.Listen(\":4000\"))\n+\tlog.Fatal(app.Listen(\":\" + PORT))\n }\n"
                },
                {
                    "date": 1717640916959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,7 +78,7 @@\n \t\t}\n \t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Todo not found\"})\n \t})\n \n-\t//listening on Port 4000\n+\t//listening on Port\n \tlog.Fatal(app.Listen(\":\" + PORT))\n }\n"
                },
                {
                    "date": 1717640945827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \t\"log\"\n \t\"os\"\n \n \t\"github.com/gofiber/fiber/v2\"\n+\t\"github.com/joho/godotenv\"\n )\n \n type Todo struct {\n \tID        int    `json:\"id\"`\n@@ -19,9 +20,9 @@\n \tfmt.Println(\"Hello World\")\n \tapp := fiber.New()\n \n \terr := godotenv.Load(\".env\")\n-\tif err != nil{\n+\tif err != nil {\n \t\tlog.Fatal(\"Error loading .env file\")\n \t}\n \n \tPORT := os.Getenv(\"PORT\")\n"
                },
                {
                    "date": 1717776167332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,84 +1,13 @@\n package main\n \n-import (\n-\t\"fmt\"\n-\t\"log\"\n-\t\"os\"\n+import \"fmt\"\n \n-\t\"github.com/gofiber/fiber/v2\"\n-\t\"github.com/joho/godotenv\"\n-)\n-\n type Todo struct {\n \tID        int    `json:\"id\"`\n \tCompleted bool   `json:\"completed\"`\n \tBody      string `json:\"body\"`\n }\n \n-func main() {\n-\t//boilerplate setup\n+func main(){\n \tfmt.Println(\"Hello World\")\n-\tapp := fiber.New()\n-\n-\terr := godotenv.Load(\".env\")\n-\tif err != nil {\n-\t\tlog.Fatal(\"Error loading .env file\")\n-\t}\n-\n-\tPORT := os.Getenv(\"PORT\")\n-\n-\ttodos := []Todo{}\n-\n-\tapp.Get(\"/api/todos\", func(c *fiber.Ctx) error {\n-\t\treturn c.Status(200).JSON(todos)\n-\t})\n-\n-\t//create a Todo\n-\tapp.Post(\"/api/todos\", func(c *fiber.Ctx) error {\n-\t\ttodo := &Todo{} //default values: {id: 0, completed: False, body: \"\"}\n-\n-\t\tif err := c.BodyParser(todo); err != nil {\n-\t\t\treturn err\n-\t\t}\n-\n-\t\tif todo.Body == \"\" {\n-\t\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Todo body is required\"})\n-\t\t}\n-\n-\t\ttodo.ID = len(todos) + 1\n-\t\ttodos = append(todos, *todo)\n-\n-\t\treturn c.Status(201).JSON(todo)\n-\t})\n-\n-\t//update a todo\n-\tapp.Patch(\"/api/todos/:id\", func(c *fiber.Ctx) error {\n-\t\tid := c.Params(\"id\")\n-\n-\t\tfor i, todo := range todos {\n-\t\t\tif fmt.Sprint(todo.ID) == id {\n-\t\t\t\ttodos[i].Completed = true\n-\t\t\t\treturn c.Status(200).JSON(todos[i])\n-\t\t\t}\n-\t\t}\n-\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Todo not found\"})\n-\t})\n-\n-\t//delete a todo endpoint\n-\n-\tapp.Delete(\"/api/todos/:id\", func(c *fiber.Ctx) error {\n-\t\tid := c.Params(\"id\")\n-\n-\t\tfor i, todo := range todos {\n-\t\t\tif fmt.Sprint(todo.ID) == id {\n-\t\t\t\t// 1 2 3 4 5 (delete 3 by indexing first 2 and last 2) -> 1 2 4 5\n-\t\t\t\ttodos = append(todos[:i], todos[i+1:]...)\n-\t\t\t\treturn c.Status(200).JSON(fiber.Map{\"success\": true})\n-\t\t\t}\n-\t\t}\n-\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Todo not found\"})\n-\t})\n-\n-\t//listening on Port\n-\tlog.Fatal(app.Listen(\":\" + PORT))\n-}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717776475072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,44 @@\n package main\n \n-import \"fmt\"\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"os\"\n \n+\t\"github.com/joho/godotenv\"\n+\t\"go.mongodb.org/mongo-driver/mongo\"\n+\t\"go.mongodb.org/mongo-driver/mongo/options\"\n+)\n+\n type Todo struct {\n-\tID        int    `json:\"id\"`\n+\tID        int    `json:\"_id\" bson:\"_id\"`\n \tCompleted bool   `json:\"completed\"`\n \tBody      string `json:\"body\"`\n }\n \n+var collection *mongo.Collection\n+\n func main() {\n \tfmt.Println(\"Hello World\")\n+\n+\terr := godotenv.Load(\".env\")\n+\tif err != nil{\n+\t\tlog.Fatal(\"Error loading .env file:\",err)\n+\t}\n+\n+\tMONGODB_URI := os.Getenv((\"MONGODB_URI\"))\n+\tclientOptions := options.Client().ApplyURI(MONGODB_URI)\n+\tclient,err := mongo.Connect(context.Background(),clientOptions)\n+\n+\tif err != nil{\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\terr = client.Ping(context.Background(), nil)\n+\tif err != nil{\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tfmt.Println(\"Connected to MONGODB ATLAS\")\n }\n"
                },
                {
                    "date": 1717776634792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \t\"fmt\"\n \t\"log\"\n \t\"os\"\n \n+\t\"github.com/gofiber/fiber/v2\"\n \t\"github.com/joho/godotenv\"\n \t\"go.mongodb.org/mongo-driver/mongo\"\n \t\"go.mongodb.org/mongo-driver/mongo/options\"\n )\n@@ -40,5 +41,14 @@\n \t\tlog.Fatal(err)\n \t}\n \n \tfmt.Println(\"Connected to MONGODB ATLAS\")\n+\n+\tcollection = client.Database(\"golang_db\").Collection(\"todos\")\n+\n+\tapp := fiber.New()\n+\n+\tapp.Get(\"/api/todos\", getTodos)\n+\tapp.Post(\"/api/todos\", createTodo)\n+\tapp.Patch(\"/api/todos/:id\", updateTodo)\n+\tapp.Delete(\"/api/todos/:id\", deleteTodo)\n }\n"
                }
            ],
            "date": 1717601365986,
            "name": "Commit-0",
            "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc main(){\n\tfmt.Println(\"Hello World\")\n\n\tmyName  := \"Anurag Kejriwal\"\n\n\tfmt.Println((myName))\n\n\tapp := fiber.New()\n\tlog.Fatal(app.Listen(\":4000\"))\n}"
        }
    ]
}